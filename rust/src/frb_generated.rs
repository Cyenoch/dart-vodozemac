// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::bindings::*;
use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1117765086;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__bindings__PkSigning_from_secret_key_impl(
    key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PkSigning_from_secret_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_key = key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::PkSigning::from_secret_key(&api_key)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__PkSigning_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PkSigning_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::PkSigning::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__PkSigning_public_key_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PkSigning_public_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::PkSigning::public_key(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__PkSigning_secret_key_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PkSigning_secret_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::PkSigning::secret_key(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__PkSigning_sign_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>,
    >,
    message: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PkSigning_sign",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(crate::bindings::PkSigning::sign(
                    &*api_that_guard,
                    &api_message,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__VodozemacSas_establish_sas_secret_impl(
    that: impl CstDecode<VodozemacSas>,
    other_public_key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VodozemacSas_establish_sas_secret",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other_public_key = other_public_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacSas::establish_sas_secret(
                        api_that,
                        &api_other_public_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__VodozemacSas_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VodozemacSas_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacSas::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__VodozemacSas_public_key_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "VodozemacSas_public_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacSas::public_key(
                    &*api_that_guard,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_create_inbound_session_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
    their_identity_key: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
    pre_key_message_base64: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_create_inbound_session",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_their_identity_key = their_identity_key.cst_decode();
            let api_pre_key_message_base64 = pre_key_message_base64.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacAccount::create_inbound_session(
                        &api_that,
                        api_their_identity_key,
                        api_pre_key_message_base64,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_account_create_outbound_session_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
    config: impl CstDecode<crate::bindings::VodozemacOlmSessionConfig>,
    identity_key: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
    one_time_key: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_create_outbound_session",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_config = config.cst_decode();
            let api_identity_key = identity_key.cst_decode();
            let api_one_time_key = one_time_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::create_outbound_session(
                        &api_that,
                        api_config,
                        api_identity_key,
                        api_one_time_key,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_curve25519_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_curve25519_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::curve25519_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_ed25519_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_ed25519_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacAccount::ed25519_key(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_fallback_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_fallback_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::fallback_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_forget_fallback_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_forget_fallback_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::forget_fallback_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_from_olm_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacAccount::from_olm_pickle_encrypted(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_account_from_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_from_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacAccount::from_pickle_encrypted(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_account_generate_fallback_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_generate_fallback_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::generate_fallback_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_generate_one_time_keys_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
    count: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_generate_one_time_keys",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_count = count.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::bindings::VodozemacAccount::generate_one_time_keys(&api_that, api_count);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_identity_keys_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_identity_keys",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::identity_keys(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_mark_keys_as_published_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_mark_keys_as_published",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::bindings::VodozemacAccount::mark_keys_as_published(&api_that);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_max_number_of_one_time_keys",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::max_number_of_one_time_keys(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacAccount::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_one_time_keys_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_one_time_keys",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::one_time_keys(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_pickle_encrypted_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacAccount::pickle_encrypted(&api_that, api_pickle_key),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_account_sign_impl(
    that: impl CstDecode<crate::bindings::VodozemacAccount>,
    message: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_account_sign",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacAccount::sign(
                    &api_that,
                    api_message,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes_impl(
    that: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_curve_25519_public_key_as_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacCurve25519PublicKey::as_bytes(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64_impl(
    base64_key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_curve_25519_public_key_from_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_base64_key = base64_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacCurve25519PublicKey::from_base64(api_base64_key)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice_impl(
    bytes: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_curve_25519_public_key_from_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacCurve25519PublicKey::from_slice(api_bytes)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64_impl(
    that: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_curve_25519_public_key_to_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacCurve25519PublicKey::to_base64(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes_impl(
    that: impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_public_key_as_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacEd25519PublicKey::as_bytes(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64_impl(
    base64_key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_public_key_from_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_base64_key = base64_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacEd25519PublicKey::from_base64(api_base64_key)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice_impl(
    bytes: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_public_key_from_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacEd25519PublicKey::from_slice(api_bytes)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64_impl(
    that: impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_public_key_to_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacEd25519PublicKey::to_base64(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_public_key_verify_impl(
    that: impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>,
    message: impl CstDecode<String>,
    signature: impl CstDecode<crate::bindings::VodozemacEd25519Signature>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_public_key_verify",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            let api_signature = signature.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacEd25519PublicKey::verify(
                        &api_that,
                        api_message,
                        api_signature,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_signature_from_base64_impl(
    signature: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_signature_from_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_signature = signature.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacEd25519Signature::from_base64(api_signature)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_signature_from_slice_impl(
    bytes: impl CstDecode<[u8; 64]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_signature_from_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacEd25519Signature::from_slice(api_bytes)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_signature_to_base64_impl(
    that: impl CstDecode<crate::bindings::VodozemacEd25519Signature>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_signature_to_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacEd25519Signature::to_base64(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes_impl(
    that: impl CstDecode<crate::bindings::VodozemacEd25519Signature>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_ed_25519_signature_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacEd25519Signature::to_bytes(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_established_sas_calculate_mac_impl(
    that: impl CstDecode<crate::bindings::VodozemacEstablishedSas>,
    input: impl CstDecode<String>,
    info: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_established_sas_calculate_mac",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_input = input.cst_decode();
            let api_info = info.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacEstablishedSas::calculate_mac(
                        &api_that, &api_input, &api_info,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated_impl(
    that: impl CstDecode<crate::bindings::VodozemacEstablishedSas>,
    input: impl CstDecode<String>,
    info: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_established_sas_calculate_mac_deprecated",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_input = input.cst_decode();
            let api_info = info.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacEstablishedSas::calculate_mac_deprecated(
                            &api_that, &api_input, &api_info,
                        )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_established_sas_generate_bytes_impl(
    that: impl CstDecode<crate::bindings::VodozemacEstablishedSas>,
    info: impl CstDecode<String>,
    length: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_established_sas_generate_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_info = info.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacEstablishedSas::generate_bytes(
                        &api_that, &api_info, api_length,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_established_sas_verify_mac_impl(
    that: impl CstDecode<crate::bindings::VodozemacEstablishedSas>,
    input: impl CstDecode<String>,
    info: impl CstDecode<String>,
    mac: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_established_sas_verify_mac",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_input = input.cst_decode();
            let api_info = info.cst_decode();
            let api_mac = mac.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacEstablishedSas::verify_mac(
                        &api_that, &api_input, &api_info, &api_mac,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_encrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
    plaintext: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_encrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_plaintext = plaintext.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::encrypt(&api_that, api_plaintext),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_from_olm_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacGroupSession::from_olm_pickle_encrypted(
                            api_pickle,
                            api_pickle_key,
                        )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_from_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacGroupSession::from_pickle_encrypted(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_message_index_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_message_index",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::message_index(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_new_impl(
    config: impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_config = config.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacGroupSession::new(api_config))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_pickle_encrypted_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacGroupSession::pickle_encrypted(
                        &api_that,
                        api_pickle_key,
                    ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_session_config_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_session_config",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::session_config(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_session_id_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_session_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::session_id(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_session_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_session_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::session_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_group_session_to_inbound_impl(
    that: impl CstDecode<crate::bindings::VodozemacGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_group_session_to_inbound",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacGroupSession::to_inbound(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_decrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
    encrypted: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_decrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_encrypted = encrypted.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacInboundGroupSession::decrypt(
                        &api_that,
                        api_encrypted,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_export_at_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
    index: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_export_at",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacInboundGroupSession::export_at(&api_that, api_index),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_export_at_first_known_index",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacInboundGroupSession::export_at_first_known_index(
                        &api_that,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_first_known_index_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_first_known_index",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacInboundGroupSession::first_known_index(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_from_olm_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacInboundGroupSession::from_olm_pickle_encrypted(
                            api_pickle,
                            api_pickle_key,
                        )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_from_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacInboundGroupSession::from_pickle_encrypted(
                            api_pickle,
                            api_pickle_key,
                        )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_import_impl(
    exported_session_key: impl CstDecode<String>,
    config: impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_import",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_exported_session_key = exported_session_key.cst_decode();
            let api_config = config.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacInboundGroupSession::import(
                        api_exported_session_key,
                        api_config,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_new_impl(
    session_key: impl CstDecode<String>,
    config: impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_session_key = session_key.cst_decode();
            let api_config = config.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacInboundGroupSession::new(
                        api_session_key,
                        api_config,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacInboundGroupSession::pickle_encrypted(
                        &api_that,
                        api_pickle_key,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_inbound_group_session_session_id_impl(
    that: impl CstDecode<crate::bindings::VodozemacInboundGroupSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_inbound_group_session_session_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacInboundGroupSession::session_id(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_megolm_session_config_def_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_megolm_session_config_def",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacMegolmSessionConfig::def())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_megolm_session_config_version_impl(
    that: impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_megolm_session_config_version",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacMegolmSessionConfig::version(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_megolm_session_config_version_1_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_megolm_session_config_version_1",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacMegolmSessionConfig::version_1(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_megolm_session_config_version_2_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_megolm_session_config_version_2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacMegolmSessionConfig::version_2(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_message_from_parts_impl(
    message_type: impl CstDecode<usize>,
    ciphertext: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_message_from_parts",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_message_type = message_type.cst_decode();
            let api_ciphertext = ciphertext.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacOlmMessage::from_parts(
                        api_message_type,
                        api_ciphertext,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_message_message_impl(
    that: impl CstDecode<crate::bindings::VodozemacOlmMessage>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_message_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacOlmMessage::message(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_message_message_type_impl(
    that: impl CstDecode<crate::bindings::VodozemacOlmMessage>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_message_message_type",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacOlmMessage::message_type(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_session_config_def_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_session_config_def",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacOlmSessionConfig::def())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_session_config_version_impl(
    that: impl CstDecode<crate::bindings::VodozemacOlmSessionConfig>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_session_config_version",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacOlmSessionConfig::version(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_session_config_version_1_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_session_config_version_1",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacOlmSessionConfig::version_1())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_olm_session_config_version_2_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_olm_session_config_version_2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacOlmSessionConfig::version_2())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_decrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkDecryption>,
    message: impl CstDecode<crate::bindings::VodozemacPkMessage>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_decrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacPkDecryption::decrypt(&api_that, api_message)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_from_key_impl(
    secret_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_from_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacPkDecryption::from_key(&api_secret_key),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_from_libolm_pickle",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacPkDecryption::from_libolm_pickle(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_new_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacPkDecryption::new())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_private_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkDecryption>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_private_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacPkDecryption::private_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_public_key_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkDecryption>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_public_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacPkDecryption::public_key(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkDecryption>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_decryption_to_libolm_pickle",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacPkDecryption::to_libolm_pickle(
                        &api_that,
                        api_pickle_key,
                    ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_encryption_encrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkEncryption>,
    message: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_encryption_encrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacPkEncryption::encrypt(&api_that, api_message),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_encryption_from_key_impl(
    public_key: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_encryption_from_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacPkEncryption::from_key(api_public_key),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_message_from_base64_impl(
    ciphertext: impl CstDecode<String>,
    mac: impl CstDecode<String>,
    ephemeral_key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_message_from_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ciphertext = ciphertext.cst_decode();
            let api_mac = mac.cst_decode();
            let api_ephemeral_key = ephemeral_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacPkMessage::from_base64(
                        &api_ciphertext,
                        &api_mac,
                        &api_ephemeral_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_message_new_impl(
    ciphertext: impl CstDecode<Vec<u8>>,
    mac: impl CstDecode<Vec<u8>>,
    ephemeral_key: impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_message_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ciphertext = ciphertext.cst_decode();
            let api_mac = mac.cst_decode();
            let api_ephemeral_key = ephemeral_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacPkMessage::new(
                    api_ciphertext,
                    api_mac,
                    api_ephemeral_key,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_pk_message_to_base64_impl(
    that: impl CstDecode<crate::bindings::VodozemacPkMessage>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_pk_message_to_base64",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacPkMessage::to_base64(&api_that)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_session_decrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
    message: impl CstDecode<crate::bindings::VodozemacOlmMessage>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_decrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok =
                        crate::bindings::VodozemacSession::decrypt(&api_that, api_message)?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_session_encrypt_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
    plaintext: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_encrypt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_plaintext = plaintext.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::bindings::VodozemacSession::encrypt(
                    &api_that,
                    api_plaintext,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_from_olm_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacSession::from_olm_pickle_encrypted(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_session_from_pickle_encrypted_impl(
    pickle: impl CstDecode<String>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_from_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_pickle = pickle.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                (move || {
                    let output_ok = crate::bindings::VodozemacSession::from_pickle_encrypted(
                        api_pickle,
                        api_pickle_key,
                    )?;
                    Ok(output_ok)
                })(),
            )
        },
    )
}
fn wire__crate__bindings__vodozemac_session_has_received_message_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_has_received_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacSession::has_received_message(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_session_pickle_encrypted_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
    pickle_key: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_pickle_encrypted",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pickle_key = pickle_key.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacSession::pickle_encrypted(&api_that, api_pickle_key),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_session_session_config_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_session_config",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::bindings::VodozemacSession::session_config(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__bindings__vodozemac_session_session_id_impl(
    that: impl CstDecode<crate::bindings::VodozemacSession>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "vodozemac_session_session_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::bindings::VodozemacSession::session_id(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for PkSigning {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for VodozemacSas {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for RustOpaqueNom<Curve25519PublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Ed25519PublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Ed25519Signature> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<EstablishedSas> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<MegolmSessionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<OlmMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<OlmSessionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<PkDecryption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<PkEncryption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<RwLock<GroupSession>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<RwLock<InboundGroupSession>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<RwLock<Session>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<std::sync::RwLock<Account>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::bindings::DecryptResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <u32>::sse_decode(deserializer);
        return crate::bindings::DecryptResult(var_field0, var_field1);
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bindings::VodozemacOneTimeKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bindings::VodozemacOneTimeKey>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for (String, String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        let mut var_field2 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 64] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::bindings::VodozemacAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_account = <RustOpaqueNom<std::sync::RwLock<Account>>>::sse_decode(deserializer);
        return crate::bindings::VodozemacAccount {
            account: var_account,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacCurve25519PublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <RustOpaqueNom<Curve25519PublicKey>>::sse_decode(deserializer);
        return crate::bindings::VodozemacCurve25519PublicKey { key: var_key };
    }
}

impl SseDecode for crate::bindings::VodozemacEd25519PublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <RustOpaqueNom<Ed25519PublicKey>>::sse_decode(deserializer);
        return crate::bindings::VodozemacEd25519PublicKey { key: var_key };
    }
}

impl SseDecode for crate::bindings::VodozemacEd25519Signature {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <RustOpaqueNom<Ed25519Signature>>::sse_decode(deserializer);
        return crate::bindings::VodozemacEd25519Signature {
            signature: var_signature,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacEstablishedSas {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_establishedSas = <RustOpaqueNom<EstablishedSas>>::sse_decode(deserializer);
        return crate::bindings::VodozemacEstablishedSas {
            established_sas: var_establishedSas,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacGroupSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_session = <RustOpaqueNom<RwLock<GroupSession>>>::sse_decode(deserializer);
        return crate::bindings::VodozemacGroupSession {
            session: var_session,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacIdentityKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ed25519 =
            <crate::bindings::VodozemacEd25519PublicKey>::sse_decode(deserializer);
        let mut var_curve25519 =
            <crate::bindings::VodozemacCurve25519PublicKey>::sse_decode(deserializer);
        return crate::bindings::VodozemacIdentityKeys {
            ed25519: var_ed25519,
            curve25519: var_curve25519,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacInboundGroupSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_session =
            <RustOpaqueNom<RwLock<InboundGroupSession>>>::sse_decode(deserializer);
        return crate::bindings::VodozemacInboundGroupSession {
            session: var_session,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacMegolmSessionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_config = <RustOpaqueNom<MegolmSessionConfig>>::sse_decode(deserializer);
        return crate::bindings::VodozemacMegolmSessionConfig { config: var_config };
    }
}

impl SseDecode for crate::bindings::VodozemacOlmMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <RustOpaqueNom<OlmMessage>>::sse_decode(deserializer);
        return crate::bindings::VodozemacOlmMessage { msg: var_msg };
    }
}

impl SseDecode for crate::bindings::VodozemacOlmSessionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_config = <RustOpaqueNom<OlmSessionConfig>>::sse_decode(deserializer);
        return crate::bindings::VodozemacOlmSessionConfig { config: var_config };
    }
}

impl SseDecode for crate::bindings::VodozemacOlmSessionCreationResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_session = <crate::bindings::VodozemacSession>::sse_decode(deserializer);
        let mut var_plaintext = <String>::sse_decode(deserializer);
        return crate::bindings::VodozemacOlmSessionCreationResult {
            session: var_session,
            plaintext: var_plaintext,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacOneTimeKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_keyid = <String>::sse_decode(deserializer);
        let mut var_key = <crate::bindings::VodozemacCurve25519PublicKey>::sse_decode(deserializer);
        return crate::bindings::VodozemacOneTimeKey {
            keyid: var_keyid,
            key: var_key,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacPkDecryption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_pkDecryption = <RustOpaqueNom<PkDecryption>>::sse_decode(deserializer);
        return crate::bindings::VodozemacPkDecryption {
            pk_decryption: var_pkDecryption,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacPkEncryption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_pkEncryption = <RustOpaqueNom<PkEncryption>>::sse_decode(deserializer);
        return crate::bindings::VodozemacPkEncryption {
            pk_encryption: var_pkEncryption,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacPkMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ciphertext = <Vec<u8>>::sse_decode(deserializer);
        let mut var_mac = <Vec<u8>>::sse_decode(deserializer);
        let mut var_ephemeralKey =
            <crate::bindings::VodozemacCurve25519PublicKey>::sse_decode(deserializer);
        return crate::bindings::VodozemacPkMessage {
            ciphertext: var_ciphertext,
            mac: var_mac,
            ephemeral_key: var_ephemeralKey,
        };
    }
}

impl SseDecode for crate::bindings::VodozemacSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_session = <RustOpaqueNom<RwLock<Session>>>::sse_decode(deserializer);
        return crate::bindings::VodozemacSession {
            session: var_session,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<PkSigning> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<PkSigning> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PkSigning>> for PkSigning {
    fn into_into_dart(self) -> FrbWrapper<PkSigning> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<VodozemacSas> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<VodozemacSas> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<VodozemacSas>> for VodozemacSas {
    fn into_into_dart(self) -> FrbWrapper<VodozemacSas> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::DecryptResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::DecryptResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::DecryptResult>
    for crate::bindings::DecryptResult
{
    fn into_into_dart(self) -> crate::bindings::DecryptResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacAccount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.account.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacAccount
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacAccount>
    for crate::bindings::VodozemacAccount
{
    fn into_into_dart(self) -> crate::bindings::VodozemacAccount {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacCurve25519PublicKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.key.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacCurve25519PublicKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacCurve25519PublicKey>
    for crate::bindings::VodozemacCurve25519PublicKey
{
    fn into_into_dart(self) -> crate::bindings::VodozemacCurve25519PublicKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacEd25519PublicKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.key.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacEd25519PublicKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacEd25519PublicKey>
    for crate::bindings::VodozemacEd25519PublicKey
{
    fn into_into_dart(self) -> crate::bindings::VodozemacEd25519PublicKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacEd25519Signature {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.signature.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacEd25519Signature
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacEd25519Signature>
    for crate::bindings::VodozemacEd25519Signature
{
    fn into_into_dart(self) -> crate::bindings::VodozemacEd25519Signature {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacEstablishedSas {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.established_sas.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacEstablishedSas
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacEstablishedSas>
    for crate::bindings::VodozemacEstablishedSas
{
    fn into_into_dart(self) -> crate::bindings::VodozemacEstablishedSas {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacGroupSession {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.session.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacGroupSession
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacGroupSession>
    for crate::bindings::VodozemacGroupSession
{
    fn into_into_dart(self) -> crate::bindings::VodozemacGroupSession {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacIdentityKeys {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ed25519.into_into_dart().into_dart(),
            self.curve25519.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacIdentityKeys
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacIdentityKeys>
    for crate::bindings::VodozemacIdentityKeys
{
    fn into_into_dart(self) -> crate::bindings::VodozemacIdentityKeys {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacInboundGroupSession {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.session.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacInboundGroupSession
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacInboundGroupSession>
    for crate::bindings::VodozemacInboundGroupSession
{
    fn into_into_dart(self) -> crate::bindings::VodozemacInboundGroupSession {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacMegolmSessionConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.config.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacMegolmSessionConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacMegolmSessionConfig>
    for crate::bindings::VodozemacMegolmSessionConfig
{
    fn into_into_dart(self) -> crate::bindings::VodozemacMegolmSessionConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacOlmMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.msg.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacOlmMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacOlmMessage>
    for crate::bindings::VodozemacOlmMessage
{
    fn into_into_dart(self) -> crate::bindings::VodozemacOlmMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacOlmSessionConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.config.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacOlmSessionConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacOlmSessionConfig>
    for crate::bindings::VodozemacOlmSessionConfig
{
    fn into_into_dart(self) -> crate::bindings::VodozemacOlmSessionConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacOlmSessionCreationResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.session.into_into_dart().into_dart(),
            self.plaintext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacOlmSessionCreationResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacOlmSessionCreationResult>
    for crate::bindings::VodozemacOlmSessionCreationResult
{
    fn into_into_dart(self) -> crate::bindings::VodozemacOlmSessionCreationResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacOneTimeKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.keyid.into_into_dart().into_dart(),
            self.key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacOneTimeKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacOneTimeKey>
    for crate::bindings::VodozemacOneTimeKey
{
    fn into_into_dart(self) -> crate::bindings::VodozemacOneTimeKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacPkDecryption {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.pk_decryption.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacPkDecryption
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacPkDecryption>
    for crate::bindings::VodozemacPkDecryption
{
    fn into_into_dart(self) -> crate::bindings::VodozemacPkDecryption {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacPkEncryption {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.pk_encryption.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacPkEncryption
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacPkEncryption>
    for crate::bindings::VodozemacPkEncryption
{
    fn into_into_dart(self) -> crate::bindings::VodozemacPkEncryption {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacPkMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ciphertext.into_into_dart().into_dart(),
            self.mac.into_into_dart().into_dart(),
            self.ephemeral_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacPkMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacPkMessage>
    for crate::bindings::VodozemacPkMessage
{
    fn into_into_dart(self) -> crate::bindings::VodozemacPkMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::VodozemacSession {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.session.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::VodozemacSession
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::VodozemacSession>
    for crate::bindings::VodozemacSession
{
    fn into_into_dart(self) -> crate::bindings::VodozemacSession {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for PkSigning {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for VodozemacSas {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for RustOpaqueNom<Curve25519PublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Ed25519PublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Ed25519Signature> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<EstablishedSas> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<MegolmSessionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<OlmMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<OlmSessionConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<PkDecryption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<PkEncryption> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<GroupSession>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<InboundGroupSession>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<Session>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<std::sync::RwLock<Account>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::bindings::DecryptResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <u32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bindings::VodozemacOneTimeKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bindings::VodozemacOneTimeKey>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (String, String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
        <String>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [u8; 64] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::bindings::VodozemacAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<std::sync::RwLock<Account>>>::sse_encode(self.account, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacCurve25519PublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Curve25519PublicKey>>::sse_encode(self.key, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacEd25519PublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Ed25519PublicKey>>::sse_encode(self.key, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacEd25519Signature {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<Ed25519Signature>>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacEstablishedSas {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<EstablishedSas>>::sse_encode(self.established_sas, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacGroupSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<RwLock<GroupSession>>>::sse_encode(self.session, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacIdentityKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bindings::VodozemacEd25519PublicKey>::sse_encode(self.ed25519, serializer);
        <crate::bindings::VodozemacCurve25519PublicKey>::sse_encode(self.curve25519, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacInboundGroupSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<RwLock<InboundGroupSession>>>::sse_encode(self.session, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacMegolmSessionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<MegolmSessionConfig>>::sse_encode(self.config, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacOlmMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<OlmMessage>>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacOlmSessionConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<OlmSessionConfig>>::sse_encode(self.config, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacOlmSessionCreationResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bindings::VodozemacSession>::sse_encode(self.session, serializer);
        <String>::sse_encode(self.plaintext, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacOneTimeKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.keyid, serializer);
        <crate::bindings::VodozemacCurve25519PublicKey>::sse_encode(self.key, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacPkDecryption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<PkDecryption>>::sse_encode(self.pk_decryption, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacPkEncryption {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<PkEncryption>>::sse_encode(self.pk_encryption, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacPkMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.ciphertext, serializer);
        <Vec<u8>>::sse_encode(self.mac, serializer);
        <crate::bindings::VodozemacCurve25519PublicKey>::sse_encode(self.ephemeral_key, serializer);
    }
}

impl SseEncode for crate::bindings::VodozemacSession {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<RwLock<Session>>>::sse_encode(self.session, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::bindings::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<PkSigning> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PkSigning {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<VodozemacSas> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> VodozemacSas {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<RustOpaqueNom<Curve25519PublicKey>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Curve25519PublicKey> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<Ed25519PublicKey>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Ed25519PublicKey> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<Ed25519Signature>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Ed25519Signature> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<EstablishedSas>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<EstablishedSas> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<MegolmSessionConfig>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<MegolmSessionConfig> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<OlmMessage>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<OlmMessage> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<OlmSessionConfig>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<OlmSessionConfig> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<PkDecryption>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<PkDecryption> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<PkEncryption>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<PkEncryption> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<GroupSession>>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<GroupSession>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<InboundGroupSession>>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<InboundGroupSession>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<Session>>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<Session>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<std::sync::RwLock<Account>>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<std::sync::RwLock<Account>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<crate::bindings::VodozemacAccount> for *mut wire_cst_vodozemac_account {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacAccount {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacAccount>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>
        for *mut wire_cst_vodozemac_curve_25519_public_key
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacCurve25519PublicKey {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacCurve25519PublicKey>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>
        for *mut wire_cst_vodozemac_ed_25519_public_key
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519PublicKey {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacEd25519PublicKey>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519Signature>
        for *mut wire_cst_vodozemac_ed_25519_signature
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519Signature {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacEd25519Signature>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacEstablishedSas>
        for *mut wire_cst_vodozemac_established_sas
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEstablishedSas {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacEstablishedSas>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacGroupSession> for *mut wire_cst_vodozemac_group_session {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacGroupSession {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacGroupSession>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacInboundGroupSession>
        for *mut wire_cst_vodozemac_inbound_group_session
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacInboundGroupSession {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacInboundGroupSession>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>
        for *mut wire_cst_vodozemac_megolm_session_config
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacMegolmSessionConfig {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacMegolmSessionConfig>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmMessage> for *mut wire_cst_vodozemac_olm_message {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmMessage {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacOlmMessage>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmSessionConfig>
        for *mut wire_cst_vodozemac_olm_session_config
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmSessionConfig {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacOlmSessionConfig>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkDecryption> for *mut wire_cst_vodozemac_pk_decryption {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkDecryption {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacPkDecryption>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkEncryption> for *mut wire_cst_vodozemac_pk_encryption {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkEncryption {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacPkEncryption>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkMessage> for *mut wire_cst_vodozemac_pk_message {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkMessage {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacPkMessage>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::VodozemacSession> for *mut wire_cst_vodozemac_session {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacSession {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::bindings::VodozemacSession>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::bindings::DecryptResult> for wire_cst_decrypt_result {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::DecryptResult {
            crate::bindings::DecryptResult(self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<crate::bindings::VodozemacOneTimeKey>>
        for *mut wire_cst_list_vodozemac_one_time_key
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::bindings::VodozemacOneTimeKey> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<(String, String, String)> for wire_cst_record_string_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String, String) {
            (
                self.field0.cst_decode(),
                self.field1.cst_decode(),
                self.field2.cst_decode(),
            )
        }
    }
    impl CstDecode<[u8; 32]> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 32] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<[u8; 64]> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 64] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<crate::bindings::VodozemacAccount> for wire_cst_vodozemac_account {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacAccount {
            crate::bindings::VodozemacAccount {
                account: self.account.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>
        for wire_cst_vodozemac_curve_25519_public_key
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacCurve25519PublicKey {
            crate::bindings::VodozemacCurve25519PublicKey {
                key: self.key.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>
        for wire_cst_vodozemac_ed_25519_public_key
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519PublicKey {
            crate::bindings::VodozemacEd25519PublicKey {
                key: self.key.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519Signature>
        for wire_cst_vodozemac_ed_25519_signature
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519Signature {
            crate::bindings::VodozemacEd25519Signature {
                signature: self.signature.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEstablishedSas> for wire_cst_vodozemac_established_sas {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEstablishedSas {
            crate::bindings::VodozemacEstablishedSas {
                established_sas: self.established_sas.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacGroupSession> for wire_cst_vodozemac_group_session {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacGroupSession {
            crate::bindings::VodozemacGroupSession {
                session: self.session.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacIdentityKeys> for wire_cst_vodozemac_identity_keys {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacIdentityKeys {
            crate::bindings::VodozemacIdentityKeys {
                ed25519: self.ed25519.cst_decode(),
                curve25519: self.curve25519.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacInboundGroupSession>
        for wire_cst_vodozemac_inbound_group_session
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacInboundGroupSession {
            crate::bindings::VodozemacInboundGroupSession {
                session: self.session.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>
        for wire_cst_vodozemac_megolm_session_config
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacMegolmSessionConfig {
            crate::bindings::VodozemacMegolmSessionConfig {
                config: self.config.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmMessage> for wire_cst_vodozemac_olm_message {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmMessage {
            crate::bindings::VodozemacOlmMessage {
                msg: self.msg.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmSessionConfig>
        for wire_cst_vodozemac_olm_session_config
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmSessionConfig {
            crate::bindings::VodozemacOlmSessionConfig {
                config: self.config.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmSessionCreationResult>
        for wire_cst_vodozemac_olm_session_creation_result
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmSessionCreationResult {
            crate::bindings::VodozemacOlmSessionCreationResult {
                session: self.session.cst_decode(),
                plaintext: self.plaintext.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOneTimeKey> for wire_cst_vodozemac_one_time_key {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOneTimeKey {
            crate::bindings::VodozemacOneTimeKey {
                keyid: self.keyid.cst_decode(),
                key: self.key.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkDecryption> for wire_cst_vodozemac_pk_decryption {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkDecryption {
            crate::bindings::VodozemacPkDecryption {
                pk_decryption: self.pk_decryption.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkEncryption> for wire_cst_vodozemac_pk_encryption {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkEncryption {
            crate::bindings::VodozemacPkEncryption {
                pk_encryption: self.pk_encryption.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkMessage> for wire_cst_vodozemac_pk_message {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkMessage {
            crate::bindings::VodozemacPkMessage {
                ciphertext: self.ciphertext.cst_decode(),
                mac: self.mac.cst_decode(),
                ephemeral_key: self.ephemeral_key.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacSession> for wire_cst_vodozemac_session {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacSession {
            crate::bindings::VodozemacSession {
                session: self.session.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_decrypt_result {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: Default::default(),
            }
        }
    }
    impl Default for wire_cst_decrypt_result {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_string_string_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
                field2: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_string_string_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_account {
        fn new_with_null_ptr() -> Self {
            Self {
                account: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_account {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_curve_25519_public_key {
        fn new_with_null_ptr() -> Self {
            Self {
                key: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_curve_25519_public_key {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_ed_25519_public_key {
        fn new_with_null_ptr() -> Self {
            Self {
                key: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_ed_25519_public_key {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_ed_25519_signature {
        fn new_with_null_ptr() -> Self {
            Self {
                signature: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_ed_25519_signature {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_established_sas {
        fn new_with_null_ptr() -> Self {
            Self {
                established_sas: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_established_sas {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_group_session {
        fn new_with_null_ptr() -> Self {
            Self {
                session: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_group_session {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_identity_keys {
        fn new_with_null_ptr() -> Self {
            Self {
                ed25519: Default::default(),
                curve25519: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_identity_keys {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_inbound_group_session {
        fn new_with_null_ptr() -> Self {
            Self {
                session: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_inbound_group_session {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_megolm_session_config {
        fn new_with_null_ptr() -> Self {
            Self {
                config: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_megolm_session_config {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_olm_message {
        fn new_with_null_ptr() -> Self {
            Self {
                msg: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_olm_message {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_olm_session_config {
        fn new_with_null_ptr() -> Self {
            Self {
                config: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_olm_session_config {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_olm_session_creation_result {
        fn new_with_null_ptr() -> Self {
            Self {
                session: Default::default(),
                plaintext: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_olm_session_creation_result {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_one_time_key {
        fn new_with_null_ptr() -> Self {
            Self {
                keyid: core::ptr::null_mut(),
                key: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_one_time_key {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_pk_decryption {
        fn new_with_null_ptr() -> Self {
            Self {
                pk_decryption: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_pk_decryption {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_pk_encryption {
        fn new_with_null_ptr() -> Self {
            Self {
                pk_encryption: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_pk_encryption {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_pk_message {
        fn new_with_null_ptr() -> Self {
            Self {
                ciphertext: core::ptr::null_mut(),
                mac: core::ptr::null_mut(),
                ephemeral_key: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_pk_message {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_vodozemac_session {
        fn new_with_null_ptr() -> Self {
            Self {
                session: Default::default(),
            }
        }
    }
    impl Default for wire_cst_vodozemac_session {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__PkSigning_from_secret_key(
        key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_from_secret_key_impl(key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__PkSigning_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_new_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__PkSigning_public_key(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_public_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__PkSigning_secret_key(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_secret_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__PkSigning_sign(
        that: usize,
        message: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_sign_impl(that, message)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__VodozemacSas_establish_sas_secret(
        that: usize,
        other_public_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_establish_sas_secret_impl(that, other_public_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__VodozemacSas_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_new_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__VodozemacSas_public_key(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_public_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_create_inbound_session(
        that: *mut wire_cst_vodozemac_account,
        their_identity_key: *mut wire_cst_vodozemac_curve_25519_public_key,
        pre_key_message_base64: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_create_inbound_session_impl(
            that,
            their_identity_key,
            pre_key_message_base64,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_create_outbound_session(
        that: *mut wire_cst_vodozemac_account,
        config: *mut wire_cst_vodozemac_olm_session_config,
        identity_key: *mut wire_cst_vodozemac_curve_25519_public_key,
        one_time_key: *mut wire_cst_vodozemac_curve_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_create_outbound_session_impl(
            that,
            config,
            identity_key,
            one_time_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_curve25519_key(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_curve25519_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_ed25519_key(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_ed25519_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_fallback_key(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_fallback_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_forget_fallback_key(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_forget_fallback_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_loose,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_from_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_from_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_generate_fallback_key(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_generate_fallback_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_generate_one_time_keys(
        that: *mut wire_cst_vodozemac_account,
        count: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_generate_one_time_keys_impl(that, count)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_identity_keys(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_identity_keys_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_mark_keys_as_published(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_mark_keys_as_published_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_new_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_one_time_keys(
        that: *mut wire_cst_vodozemac_account,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_one_time_keys_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_pickle_encrypted(
        that: *mut wire_cst_vodozemac_account,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_pickle_encrypted_impl(that, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_account_sign(
        that: *mut wire_cst_vodozemac_account,
        message: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_sign_impl(that, message)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes(
        that: *mut wire_cst_vodozemac_curve_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64(
        base64_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64_impl(base64_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice(
        bytes: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice_impl(bytes)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64(
        that: *mut wire_cst_vodozemac_curve_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes(
        that: *mut wire_cst_vodozemac_ed_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64(
        base64_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64_impl(base64_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice(
        bytes: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice_impl(bytes)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64(
        that: *mut wire_cst_vodozemac_ed_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_public_key_verify(
        that: *mut wire_cst_vodozemac_ed_25519_public_key,
        message: *mut wire_cst_list_prim_u_8_strict,
        signature: *mut wire_cst_vodozemac_ed_25519_signature,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_verify_impl(that, message, signature)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_signature_from_base64(
        signature: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_from_base64_impl(signature)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_signature_from_slice(
        bytes: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_from_slice_impl(bytes)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_signature_to_base64(
        that: *mut wire_cst_vodozemac_ed_25519_signature,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_to_base64_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes(
        that: *mut wire_cst_vodozemac_ed_25519_signature,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_established_sas_calculate_mac(
        that: *mut wire_cst_vodozemac_established_sas,
        input: *mut wire_cst_list_prim_u_8_strict,
        info: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_calculate_mac_impl(that, input, info)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated(
        that: *mut wire_cst_vodozemac_established_sas,
        input: *mut wire_cst_list_prim_u_8_strict,
        info: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated_impl(
            that, input, info,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_established_sas_generate_bytes(
        that: *mut wire_cst_vodozemac_established_sas,
        info: *mut wire_cst_list_prim_u_8_strict,
        length: u32,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_generate_bytes_impl(that, info, length)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_established_sas_verify_mac(
        that: *mut wire_cst_vodozemac_established_sas,
        input: *mut wire_cst_list_prim_u_8_strict,
        info: *mut wire_cst_list_prim_u_8_strict,
        mac: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_verify_mac_impl(that, input, info, mac)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_encrypt(
        that: *mut wire_cst_vodozemac_group_session,
        plaintext: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_encrypt_impl(that, plaintext)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_loose,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_message_index(
        that: *mut wire_cst_vodozemac_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_message_index_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_new(
        config: *mut wire_cst_vodozemac_megolm_session_config,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_new_impl(config)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_pickle_encrypted(
        that: *mut wire_cst_vodozemac_group_session,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_pickle_encrypted_impl(that, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_session_config(
        that: *mut wire_cst_vodozemac_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_config_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_session_id(
        that: *mut wire_cst_vodozemac_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_id_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_session_key(
        that: *mut wire_cst_vodozemac_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_group_session_to_inbound(
        that: *mut wire_cst_vodozemac_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_to_inbound_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_decrypt(
        that: *mut wire_cst_vodozemac_inbound_group_session,
        encrypted: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_decrypt_impl(that, encrypted)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_export_at(
        that: *mut wire_cst_vodozemac_inbound_group_session,
        index: u32,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_export_at_impl(that, index)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index(
        that: *mut wire_cst_vodozemac_inbound_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index_impl(
            that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_first_known_index(
        that: *mut wire_cst_vodozemac_inbound_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_first_known_index_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_loose,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_import(
        exported_session_key: *mut wire_cst_list_prim_u_8_strict,
        config: *mut wire_cst_vodozemac_megolm_session_config,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_import_impl(
            exported_session_key,
            config,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_new(
        session_key: *mut wire_cst_list_prim_u_8_strict,
        config: *mut wire_cst_vodozemac_megolm_session_config,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_new_impl(session_key, config)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted(
        that: *mut wire_cst_vodozemac_inbound_group_session,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted_impl(
            that, pickle_key,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_inbound_group_session_session_id(
        that: *mut wire_cst_vodozemac_inbound_group_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_session_id_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_megolm_session_config_def(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_def_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_megolm_session_config_version(
        that: *mut wire_cst_vodozemac_megolm_session_config,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_megolm_session_config_version_1(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_1_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_megolm_session_config_version_2(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_2_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_message_from_parts(
        message_type: usize,
        ciphertext: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_from_parts_impl(message_type, ciphertext)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_message_message(
        that: *mut wire_cst_vodozemac_olm_message,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_message_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_message_message_type(
        that: *mut wire_cst_vodozemac_olm_message,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_message_type_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_session_config_def(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_def_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_session_config_version(
        that: *mut wire_cst_vodozemac_olm_session_config,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_session_config_version_1(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_1_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_olm_session_config_version_2(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_2_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_decrypt(
        that: *mut wire_cst_vodozemac_pk_decryption,
        message: *mut wire_cst_vodozemac_pk_message,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_decrypt_impl(that, message)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_from_key(
        secret_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_from_key_impl(secret_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_loose,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle_impl(pickle, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_new_impl()
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_private_key(
        that: *mut wire_cst_vodozemac_pk_decryption,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_private_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_public_key(
        that: *mut wire_cst_vodozemac_pk_decryption,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_public_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle(
        that: *mut wire_cst_vodozemac_pk_decryption,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle_impl(that, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_encryption_encrypt(
        that: *mut wire_cst_vodozemac_pk_encryption,
        message: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_encryption_encrypt_impl(that, message)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_encryption_from_key(
        public_key: *mut wire_cst_vodozemac_curve_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_encryption_from_key_impl(public_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_message_from_base64(
        ciphertext: *mut wire_cst_list_prim_u_8_strict,
        mac: *mut wire_cst_list_prim_u_8_strict,
        ephemeral_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_from_base64_impl(ciphertext, mac, ephemeral_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_message_new(
        ciphertext: *mut wire_cst_list_prim_u_8_loose,
        mac: *mut wire_cst_list_prim_u_8_loose,
        ephemeral_key: *mut wire_cst_vodozemac_curve_25519_public_key,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_new_impl(ciphertext, mac, ephemeral_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_pk_message_to_base64(
        that: *mut wire_cst_vodozemac_pk_message,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_to_base64_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_decrypt(
        that: *mut wire_cst_vodozemac_session,
        message: *mut wire_cst_vodozemac_olm_message,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_decrypt_impl(that, message)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_encrypt(
        that: *mut wire_cst_vodozemac_session,
        plaintext: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_encrypt_impl(that, plaintext)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_loose,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_from_pickle_encrypted(
        pickle: *mut wire_cst_list_prim_u_8_strict,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_from_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_has_received_message(
        that: *mut wire_cst_vodozemac_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_has_received_message_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_pickle_encrypted(
        that: *mut wire_cst_vodozemac_session,
        pickle_key: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_pickle_encrypted_impl(that, pickle_key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_session_config(
        that: *mut wire_cst_vodozemac_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_session_config_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_wire__crate__bindings__vodozemac_session_session_id(
        that: *mut wire_cst_vodozemac_session,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_session_id_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_Curve25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Curve25519PublicKey>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_Curve25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Curve25519PublicKey>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_Ed25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519PublicKey>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_Ed25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519PublicKey>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_Ed25519Signature(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519Signature>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_Ed25519Signature(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519Signature>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_EstablishedSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<EstablishedSas>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_EstablishedSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<EstablishedSas>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_MegolmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<MegolmSessionConfig>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_MegolmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<MegolmSessionConfig>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_OlmMessage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmMessage>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_OlmMessage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmMessage>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_OlmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmSessionConfig>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_OlmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmSessionConfig>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_PkDecryption(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<PkDecryption>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_PkDecryption(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<PkDecryption>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_PkEncryption(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<PkEncryption>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_PkEncryption(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<PkEncryption>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_RwLockGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<GroupSession>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_RwLockGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<GroupSession>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_RwLockInboundGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<InboundGroupSession>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_RwLockInboundGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<InboundGroupSession>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_RwLockSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<Session>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_RwLockSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<Session>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockAccount(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std::sync::RwLock<Account>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockAccount(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std::sync::RwLock<Account>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_account(
    ) -> *mut wire_cst_vodozemac_account {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_account::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_curve_25519_public_key(
    ) -> *mut wire_cst_vodozemac_curve_25519_public_key {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_curve_25519_public_key::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_ed_25519_public_key(
    ) -> *mut wire_cst_vodozemac_ed_25519_public_key {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_ed_25519_public_key::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_ed_25519_signature(
    ) -> *mut wire_cst_vodozemac_ed_25519_signature {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_ed_25519_signature::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_established_sas(
    ) -> *mut wire_cst_vodozemac_established_sas {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_established_sas::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_group_session(
    ) -> *mut wire_cst_vodozemac_group_session {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_group_session::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_inbound_group_session(
    ) -> *mut wire_cst_vodozemac_inbound_group_session {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_inbound_group_session::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_megolm_session_config(
    ) -> *mut wire_cst_vodozemac_megolm_session_config {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_megolm_session_config::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_olm_message(
    ) -> *mut wire_cst_vodozemac_olm_message {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_olm_message::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_olm_session_config(
    ) -> *mut wire_cst_vodozemac_olm_session_config {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_olm_session_config::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_pk_decryption(
    ) -> *mut wire_cst_vodozemac_pk_decryption {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_pk_decryption::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_pk_encryption(
    ) -> *mut wire_cst_vodozemac_pk_encryption {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_pk_encryption::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_pk_message(
    ) -> *mut wire_cst_vodozemac_pk_message {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_pk_message::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_box_autoadd_vodozemac_session(
    ) -> *mut wire_cst_vodozemac_session {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_vodozemac_session::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_list_prim_u_8_loose(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_loose {
        let ans = wire_cst_list_prim_u_8_loose {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_vodozemac_cst_new_list_vodozemac_one_time_key(
        len: i32,
    ) -> *mut wire_cst_list_vodozemac_one_time_key {
        let wrap = wire_cst_list_vodozemac_one_time_key {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_vodozemac_one_time_key>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_decrypt_result {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: u32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_loose {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_vodozemac_one_time_key {
        ptr: *mut wire_cst_vodozemac_one_time_key,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_string_string {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
        field2: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_account {
        account: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_curve_25519_public_key {
        key: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_ed_25519_public_key {
        key: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_ed_25519_signature {
        signature: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_established_sas {
        established_sas: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_group_session {
        session: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_identity_keys {
        ed25519: wire_cst_vodozemac_ed_25519_public_key,
        curve25519: wire_cst_vodozemac_curve_25519_public_key,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_inbound_group_session {
        session: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_megolm_session_config {
        config: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_olm_message {
        msg: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_olm_session_config {
        config: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_olm_session_creation_result {
        session: wire_cst_vodozemac_session,
        plaintext: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_one_time_key {
        keyid: *mut wire_cst_list_prim_u_8_strict,
        key: wire_cst_vodozemac_curve_25519_public_key,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_pk_decryption {
        pk_decryption: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_pk_encryption {
        pk_encryption: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_pk_message {
        ciphertext: *mut wire_cst_list_prim_u_8_strict,
        mac: *mut wire_cst_list_prim_u_8_strict,
        ephemeral_key: wire_cst_vodozemac_curve_25519_public_key,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_vodozemac_session {
        session: usize,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::bindings::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<String> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self
        }
    }
    impl CstDecode<crate::bindings::DecryptResult>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::DecryptResult {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::bindings::DecryptResult(self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<Vec<u8>> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl CstDecode<Vec<crate::bindings::VodozemacOneTimeKey>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::bindings::VodozemacOneTimeKey> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Option<String>> for Option<String> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Option<String> {
            self.map(CstDecode::cst_decode)
        }
    }
    impl CstDecode<(String, String, String)>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String, String) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            (
                self_.get(0).cst_decode(),
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            )
        }
    }
    impl CstDecode<[u8; 32]> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 32] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<[u8; 64]> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 64] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<crate::bindings::VodozemacAccount>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacAccount {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacAccount {
                account: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacCurve25519PublicKey>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacCurve25519PublicKey {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacCurve25519PublicKey {
                key: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519PublicKey>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519PublicKey {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacEd25519PublicKey {
                key: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEd25519Signature>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEd25519Signature {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacEd25519Signature {
                signature: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacEstablishedSas>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacEstablishedSas {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacEstablishedSas {
                established_sas: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacGroupSession>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacGroupSession {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacGroupSession {
                session: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacIdentityKeys>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacIdentityKeys {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacIdentityKeys {
                ed25519: self_.get(0).cst_decode(),
                curve25519: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacInboundGroupSession>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacInboundGroupSession {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacInboundGroupSession {
                session: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacMegolmSessionConfig>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacMegolmSessionConfig {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacMegolmSessionConfig {
                config: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmMessage>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmMessage {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacOlmMessage {
                msg: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmSessionConfig>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmSessionConfig {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacOlmSessionConfig {
                config: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOlmSessionCreationResult>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOlmSessionCreationResult {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacOlmSessionCreationResult {
                session: self_.get(0).cst_decode(),
                plaintext: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacOneTimeKey>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacOneTimeKey {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacOneTimeKey {
                keyid: self_.get(0).cst_decode(),
                key: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkDecryption>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkDecryption {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacPkDecryption {
                pk_decryption: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkEncryption>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkEncryption {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacPkEncryption {
                pk_encryption: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacPkMessage>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacPkMessage {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacPkMessage {
                ciphertext: self_.get(0).cst_decode(),
                mac: self_.get(1).cst_decode(),
                ephemeral_key: self_.get(2).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::bindings::VodozemacSession>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::bindings::VodozemacSession {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            crate::bindings::VodozemacSession {
                session: self_.get(0).cst_decode(),
            }
        }
    }
    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<PkSigning> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PkSigning {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<VodozemacSas> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> VodozemacSas {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<RustOpaqueNom<Curve25519PublicKey>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Curve25519PublicKey> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<Ed25519PublicKey>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Ed25519PublicKey> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<Ed25519Signature>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<Ed25519Signature> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<EstablishedSas>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<EstablishedSas> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<MegolmSessionConfig>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<MegolmSessionConfig> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<OlmMessage>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<OlmMessage> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<OlmSessionConfig>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<OlmSessionConfig> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<PkDecryption>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<PkDecryption> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<PkEncryption>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<PkEncryption> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<GroupSession>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<GroupSession>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<InboundGroupSession>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<InboundGroupSession>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<RwLock<Session>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<RwLock<Session>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<std::sync::RwLock<Account>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<std::sync::RwLock<Account>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            self.is_truthy()
        }
    }
    impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
                .to_vec()
                .into()
        }
    }
    impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<[u8; 32]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 32] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<[u8; 64]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> [u8; 64] {
            let vec: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::from_vec_to_array(vec)
        }
    }
    impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__PkSigning_from_secret_key(
        key: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_from_secret_key_impl(key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__PkSigning_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_new_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__PkSigning_public_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_public_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__PkSigning_secret_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_secret_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__PkSigning_sign(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__PkSigning_sign_impl(that, message)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__VodozemacSas_establish_sas_secret(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        other_public_key: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_establish_sas_secret_impl(that, other_public_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__VodozemacSas_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_new_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__VodozemacSas_public_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__VodozemacSas_public_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_create_inbound_session(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        their_identity_key: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pre_key_message_base64: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_create_inbound_session_impl(
            that,
            their_identity_key,
            pre_key_message_base64,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_create_outbound_session(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        identity_key: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        one_time_key: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_create_outbound_session_impl(
            that,
            config,
            identity_key,
            one_time_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_curve25519_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_curve25519_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_ed25519_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_ed25519_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_fallback_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_fallback_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_forget_fallback_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_forget_fallback_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_from_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_from_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_generate_fallback_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_generate_fallback_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_generate_one_time_keys(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        count: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_generate_one_time_keys_impl(that, count)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_identity_keys(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_identity_keys_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_mark_keys_as_published(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_mark_keys_as_published_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_new_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_one_time_keys(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_one_time_keys_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_pickle_encrypted(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_pickle_encrypted_impl(that, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_account_sign(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_account_sign_impl(that, message)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64(
        base64_key: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64_impl(base64_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice(
        bytes: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice_impl(bytes)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64(
        base64_key: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64_impl(base64_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice(
        bytes: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice_impl(bytes)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_public_key_verify(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: String,
        signature: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_public_key_verify_impl(that, message, signature)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_signature_from_base64(
        signature: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_from_base64_impl(signature)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_signature_from_slice(
        bytes: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_from_slice_impl(bytes)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_signature_to_base64(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_to_base64_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_established_sas_calculate_mac(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        input: String,
        info: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_calculate_mac_impl(that, input, info)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        input: String,
        info: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated_impl(
            that, input, info,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_established_sas_generate_bytes(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        info: String,
        length: u32,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_generate_bytes_impl(that, info, length)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_established_sas_verify_mac(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        input: String,
        info: String,
        mac: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_established_sas_verify_mac_impl(that, input, info, mac)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_encrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        plaintext: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_encrypt_impl(that, plaintext)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_message_index(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_message_index_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_new(
        config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_new_impl(config)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_pickle_encrypted(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_pickle_encrypted_impl(that, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_session_config(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_config_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_session_id(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_id_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_session_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_session_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_group_session_to_inbound(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_group_session_to_inbound_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_decrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        encrypted: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_decrypt_impl(that, encrypted)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_export_at(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        index: u32,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_export_at_impl(that, index)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index_impl(
            that,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_first_known_index(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_first_known_index_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted_impl(
            pickle, pickle_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_import(
        exported_session_key: String,
        config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_import_impl(
            exported_session_key,
            config,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_new(
        session_key: String,
        config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_new_impl(session_key, config)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted_impl(
            that, pickle_key,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_inbound_group_session_session_id(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_inbound_group_session_session_id_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_megolm_session_config_def(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_def_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_megolm_session_config_version(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_megolm_session_config_version_1(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_1_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_megolm_session_config_version_2(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_megolm_session_config_version_2_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_message_from_parts(
        message_type: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        ciphertext: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_from_parts_impl(message_type, ciphertext)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_message_message(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_message_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_message_message_type(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_message_message_type_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_session_config_def(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_def_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_session_config_version(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_session_config_version_1(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_1_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_olm_session_config_version_2(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_olm_session_config_version_2_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_decrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_decrypt_impl(that, message)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_from_key(
        secret_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_from_key_impl(secret_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle_impl(pickle, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_new(
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_new_impl()
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_private_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_private_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_public_key(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_public_key_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle_impl(that, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_encryption_encrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_encryption_encrypt_impl(that, message)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_encryption_from_key(
        public_key: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_encryption_from_key_impl(public_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_message_from_base64(
        ciphertext: String,
        mac: String,
        ephemeral_key: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_from_base64_impl(ciphertext, mac, ephemeral_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_message_new(
        ciphertext: Box<[u8]>,
        mac: Box<[u8]>,
        ephemeral_key: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_new_impl(ciphertext, mac, ephemeral_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_pk_message_to_base64(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_pk_message_to_base64_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_decrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        message: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_decrypt_impl(that, message)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_encrypt(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        plaintext: String,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_encrypt_impl(that, plaintext)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_from_pickle_encrypted(
        pickle: String,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_from_pickle_encrypted_impl(pickle, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_has_received_message(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_has_received_message_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_pickle_encrypted(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        pickle_key: Box<[u8]>,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_pickle_encrypted_impl(that, pickle_key)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_session_config(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_session_config_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__bindings__vodozemac_session_session_id(
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__bindings__vodozemac_session_session_id_impl(that)
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_Curve25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Curve25519PublicKey>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_Curve25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Curve25519PublicKey>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_Ed25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519PublicKey>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_Ed25519PublicKey(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519PublicKey>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_Ed25519Signature(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519Signature>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_Ed25519Signature(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<Ed25519Signature>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_EstablishedSas(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<EstablishedSas>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_EstablishedSas(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<EstablishedSas>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_MegolmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<MegolmSessionConfig>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_MegolmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<MegolmSessionConfig>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_OlmMessage(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<OlmMessage>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_OlmMessage(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<OlmMessage>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_OlmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmSessionConfig>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_OlmSessionConfig(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<OlmSessionConfig>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_PkDecryption(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<PkDecryption>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_PkDecryption(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<PkDecryption>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_PkEncryption(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<PkEncryption>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_PkEncryption(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<PkEncryption>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_RwLockGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<GroupSession>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_RwLockGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<GroupSession>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_RwLockInboundGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<InboundGroupSession>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_RwLockInboundGroupSession(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RwLock<InboundGroupSession>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_RwLockSession(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<RwLock<Session>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_RwLockSession(ptr: *const std::ffi::c_void) {
        unsafe {
            StdArc::<RwLock<Session>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PkSigning>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VodozemacSas>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockAccount(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std::sync::RwLock<Account>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockAccount(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std::sync::RwLock<Account>>::decrement_strong_count(ptr as _);
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

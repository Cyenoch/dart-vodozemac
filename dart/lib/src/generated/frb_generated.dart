// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'bindings.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1117765086;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'vodozemac_bindings_dart',
    ioDirectory: '../rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  PkSigning crateBindingsPkSigningFromSecretKey({required String key});

  PkSigning crateBindingsPkSigningNew();

  VodozemacEd25519PublicKey crateBindingsPkSigningPublicKey({required PkSigning that});

  String crateBindingsPkSigningSecretKey({required PkSigning that});

  VodozemacEd25519Signature crateBindingsPkSigningSign({required PkSigning that, required String message});

  VodozemacEstablishedSas crateBindingsVodozemacSasEstablishSasSecret(
      {required VodozemacSas that, required String otherPublicKey});

  VodozemacSas crateBindingsVodozemacSasNew();

  String crateBindingsVodozemacSasPublicKey({required VodozemacSas that});

  VodozemacOlmSessionCreationResult crateBindingsVodozemacAccountCreateInboundSession(
      {required VodozemacAccount that,
      required VodozemacCurve25519PublicKey theirIdentityKey,
      required String preKeyMessageBase64});

  VodozemacSession crateBindingsVodozemacAccountCreateOutboundSession(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey});

  VodozemacCurve25519PublicKey crateBindingsVodozemacAccountCurve25519Key({required VodozemacAccount that});

  VodozemacEd25519PublicKey crateBindingsVodozemacAccountEd25519Key({required VodozemacAccount that});

  List<VodozemacOneTimeKey> crateBindingsVodozemacAccountFallbackKey({required VodozemacAccount that});

  bool crateBindingsVodozemacAccountForgetFallbackKey({required VodozemacAccount that});

  VodozemacAccount crateBindingsVodozemacAccountFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  VodozemacAccount crateBindingsVodozemacAccountFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  String? crateBindingsVodozemacAccountGenerateFallbackKey({required VodozemacAccount that});

  void crateBindingsVodozemacAccountGenerateOneTimeKeys({required VodozemacAccount that, required BigInt count});

  VodozemacIdentityKeys crateBindingsVodozemacAccountIdentityKeys({required VodozemacAccount that});

  void crateBindingsVodozemacAccountMarkKeysAsPublished({required VodozemacAccount that});

  BigInt crateBindingsVodozemacAccountMaxNumberOfOneTimeKeys({required VodozemacAccount that});

  VodozemacAccount crateBindingsVodozemacAccountNew();

  List<VodozemacOneTimeKey> crateBindingsVodozemacAccountOneTimeKeys({required VodozemacAccount that});

  String crateBindingsVodozemacAccountPickleEncrypted({required VodozemacAccount that, required U8Array32 pickleKey});

  VodozemacEd25519Signature crateBindingsVodozemacAccountSign(
      {required VodozemacAccount that, required String message});

  U8Array32 crateBindingsVodozemacCurve25519PublicKeyAsBytes({required VodozemacCurve25519PublicKey that});

  VodozemacCurve25519PublicKey crateBindingsVodozemacCurve25519PublicKeyFromBase64({required String base64Key});

  VodozemacCurve25519PublicKey crateBindingsVodozemacCurve25519PublicKeyFromSlice({required U8Array32 bytes});

  String crateBindingsVodozemacCurve25519PublicKeyToBase64({required VodozemacCurve25519PublicKey that});

  U8Array32 crateBindingsVodozemacEd25519PublicKeyAsBytes({required VodozemacEd25519PublicKey that});

  VodozemacEd25519PublicKey crateBindingsVodozemacEd25519PublicKeyFromBase64({required String base64Key});

  VodozemacEd25519PublicKey crateBindingsVodozemacEd25519PublicKeyFromSlice({required U8Array32 bytes});

  String crateBindingsVodozemacEd25519PublicKeyToBase64({required VodozemacEd25519PublicKey that});

  void crateBindingsVodozemacEd25519PublicKeyVerify(
      {required VodozemacEd25519PublicKey that, required String message, required VodozemacEd25519Signature signature});

  VodozemacEd25519Signature crateBindingsVodozemacEd25519SignatureFromBase64({required String signature});

  VodozemacEd25519Signature crateBindingsVodozemacEd25519SignatureFromSlice({required U8Array64 bytes});

  String crateBindingsVodozemacEd25519SignatureToBase64({required VodozemacEd25519Signature that});

  U8Array64 crateBindingsVodozemacEd25519SignatureToBytes({required VodozemacEd25519Signature that});

  String crateBindingsVodozemacEstablishedSasCalculateMac(
      {required VodozemacEstablishedSas that, required String input, required String info});

  String crateBindingsVodozemacEstablishedSasCalculateMacDeprecated(
      {required VodozemacEstablishedSas that, required String input, required String info});

  Uint8List crateBindingsVodozemacEstablishedSasGenerateBytes(
      {required VodozemacEstablishedSas that, required String info, required int length});

  void crateBindingsVodozemacEstablishedSasVerifyMac(
      {required VodozemacEstablishedSas that, required String input, required String info, required String mac});

  String crateBindingsVodozemacGroupSessionEncrypt({required VodozemacGroupSession that, required String plaintext});

  VodozemacGroupSession crateBindingsVodozemacGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  VodozemacGroupSession crateBindingsVodozemacGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  int crateBindingsVodozemacGroupSessionMessageIndex({required VodozemacGroupSession that});

  VodozemacGroupSession crateBindingsVodozemacGroupSessionNew({required VodozemacMegolmSessionConfig config});

  String crateBindingsVodozemacGroupSessionPickleEncrypted(
      {required VodozemacGroupSession that, required U8Array32 pickleKey});

  VodozemacMegolmSessionConfig crateBindingsVodozemacGroupSessionSessionConfig({required VodozemacGroupSession that});

  String crateBindingsVodozemacGroupSessionSessionId({required VodozemacGroupSession that});

  String crateBindingsVodozemacGroupSessionSessionKey({required VodozemacGroupSession that});

  VodozemacInboundGroupSession crateBindingsVodozemacGroupSessionToInbound({required VodozemacGroupSession that});

  DecryptResult crateBindingsVodozemacInboundGroupSessionDecrypt(
      {required VodozemacInboundGroupSession that, required String encrypted});

  String? crateBindingsVodozemacInboundGroupSessionExportAt(
      {required VodozemacInboundGroupSession that, required int index});

  String crateBindingsVodozemacInboundGroupSessionExportAtFirstKnownIndex({required VodozemacInboundGroupSession that});

  int crateBindingsVodozemacInboundGroupSessionFirstKnownIndex({required VodozemacInboundGroupSession that});

  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionImport(
      {required String exportedSessionKey, required VodozemacMegolmSessionConfig config});

  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionNew(
      {required String sessionKey, required VodozemacMegolmSessionConfig config});

  String crateBindingsVodozemacInboundGroupSessionPickleEncrypted(
      {required VodozemacInboundGroupSession that, required U8Array32 pickleKey});

  String crateBindingsVodozemacInboundGroupSessionSessionId({required VodozemacInboundGroupSession that});

  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigDef();

  int crateBindingsVodozemacMegolmSessionConfigVersion({required VodozemacMegolmSessionConfig that});

  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigVersion1();

  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigVersion2();

  VodozemacOlmMessage crateBindingsVodozemacOlmMessageFromParts(
      {required BigInt messageType, required String ciphertext});

  String crateBindingsVodozemacOlmMessageMessage({required VodozemacOlmMessage that});

  BigInt crateBindingsVodozemacOlmMessageMessageType({required VodozemacOlmMessage that});

  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigDef();

  int crateBindingsVodozemacOlmSessionConfigVersion({required VodozemacOlmSessionConfig that});

  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigVersion1();

  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigVersion2();

  String crateBindingsVodozemacPkDecryptionDecrypt(
      {required VodozemacPkDecryption that, required VodozemacPkMessage message});

  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionFromKey({required U8Array32 secretKey});

  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionFromLibolmPickle(
      {required String pickle, required List<int> pickleKey});

  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionNew();

  Uint8List crateBindingsVodozemacPkDecryptionPrivateKey({required VodozemacPkDecryption that});

  String crateBindingsVodozemacPkDecryptionPublicKey({required VodozemacPkDecryption that});

  String crateBindingsVodozemacPkDecryptionToLibolmPickle(
      {required VodozemacPkDecryption that, required U8Array32 pickleKey});

  VodozemacPkMessage crateBindingsVodozemacPkEncryptionEncrypt(
      {required VodozemacPkEncryption that, required String message});

  VodozemacPkEncryption crateBindingsVodozemacPkEncryptionFromKey({required VodozemacCurve25519PublicKey publicKey});

  VodozemacPkMessage crateBindingsVodozemacPkMessageFromBase64(
      {required String ciphertext, required String mac, required String ephemeralKey});

  VodozemacPkMessage crateBindingsVodozemacPkMessageNew(
      {required List<int> ciphertext, required List<int> mac, required VodozemacCurve25519PublicKey ephemeralKey});

  (String, String, String) crateBindingsVodozemacPkMessageToBase64({required VodozemacPkMessage that});

  String crateBindingsVodozemacSessionDecrypt({required VodozemacSession that, required VodozemacOlmMessage message});

  VodozemacOlmMessage crateBindingsVodozemacSessionEncrypt({required VodozemacSession that, required String plaintext});

  VodozemacSession crateBindingsVodozemacSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  VodozemacSession crateBindingsVodozemacSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  bool crateBindingsVodozemacSessionHasReceivedMessage({required VodozemacSession that});

  String crateBindingsVodozemacSessionPickleEncrypted({required VodozemacSession that, required U8Array32 pickleKey});

  VodozemacOlmSessionConfig crateBindingsVodozemacSessionSessionConfig({required VodozemacSession that});

  String crateBindingsVodozemacSessionSessionId({required VodozemacSession that});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Curve25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Curve25519PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Curve25519PublicKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ed25519PublicKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519Signature;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519Signature;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ed25519SignaturePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_EstablishedSas;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_EstablishedSas;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EstablishedSasPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MegolmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MegolmSessionConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MegolmSessionConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmMessage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmMessage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OlmMessagePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmSessionConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OlmSessionConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkDecryption;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkDecryption;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PkDecryptionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkEncryption;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkEncryption;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PkEncryptionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockGroupSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockGroupSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockInboundGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockInboundGroupSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockInboundGroupSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkSigning;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkSigning;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PkSigningPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_VodozemacSas;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_VodozemacSas;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VodozemacSasPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockAccount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockAccount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockAccountPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  PkSigning crateBindingsPkSigningFromSecretKey({required String key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(key);
        return wire.wire__crate__bindings__PkSigning_from_secret_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsPkSigningFromSecretKeyConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsPkSigningFromSecretKeyConstMeta => const TaskConstMeta(
        debugName: "PkSigning_from_secret_key",
        argNames: ["key"],
      );

  @override
  PkSigning crateBindingsPkSigningNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__PkSigning_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsPkSigningNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsPkSigningNewConstMeta => const TaskConstMeta(
        debugName: "PkSigning_new",
        argNames: [],
      );

  @override
  VodozemacEd25519PublicKey crateBindingsPkSigningPublicKey({required PkSigning that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(that);
        return wire.wire__crate__bindings__PkSigning_public_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsPkSigningPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsPkSigningPublicKeyConstMeta => const TaskConstMeta(
        debugName: "PkSigning_public_key",
        argNames: ["that"],
      );

  @override
  String crateBindingsPkSigningSecretKey({required PkSigning that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(that);
        return wire.wire__crate__bindings__PkSigning_secret_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsPkSigningSecretKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsPkSigningSecretKeyConstMeta => const TaskConstMeta(
        debugName: "PkSigning_secret_key",
        argNames: ["that"],
      );

  @override
  VodozemacEd25519Signature crateBindingsPkSigningSign({required PkSigning that, required String message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(that);
        var arg1 = cst_encode_String(message);
        return wire.wire__crate__bindings__PkSigning_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsPkSigningSignConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsPkSigningSignConstMeta => const TaskConstMeta(
        debugName: "PkSigning_sign",
        argNames: ["that", "message"],
      );

  @override
  VodozemacEstablishedSas crateBindingsVodozemacSasEstablishSasSecret(
      {required VodozemacSas that, required String otherPublicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(that);
        var arg1 = cst_encode_String(otherPublicKey);
        return wire.wire__crate__bindings__VodozemacSas_establish_sas_secret(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_established_sas,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacSasEstablishSasSecretConstMeta,
      argValues: [that, otherPublicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSasEstablishSasSecretConstMeta => const TaskConstMeta(
        debugName: "VodozemacSas_establish_sas_secret",
        argNames: ["that", "otherPublicKey"],
      );

  @override
  VodozemacSas crateBindingsVodozemacSasNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__VodozemacSas_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSasNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSasNewConstMeta => const TaskConstMeta(
        debugName: "VodozemacSas_new",
        argNames: [],
      );

  @override
  String crateBindingsVodozemacSasPublicKey({required VodozemacSas that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(that);
        return wire.wire__crate__bindings__VodozemacSas_public_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSasPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSasPublicKeyConstMeta => const TaskConstMeta(
        debugName: "VodozemacSas_public_key",
        argNames: ["that"],
      );

  @override
  VodozemacOlmSessionCreationResult crateBindingsVodozemacAccountCreateInboundSession(
      {required VodozemacAccount that,
      required VodozemacCurve25519PublicKey theirIdentityKey,
      required String preKeyMessageBase64}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(theirIdentityKey);
        var arg2 = cst_encode_String(preKeyMessageBase64);
        return wire.wire__crate__bindings__vodozemac_account_create_inbound_session(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_creation_result,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacAccountCreateInboundSessionConstMeta,
      argValues: [that, theirIdentityKey, preKeyMessageBase64],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountCreateInboundSessionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_create_inbound_session",
        argNames: ["that", "theirIdentityKey", "preKeyMessageBase64"],
      );

  @override
  VodozemacSession crateBindingsVodozemacAccountCreateOutboundSession(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_olm_session_config(config);
        var arg2 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(identityKey);
        var arg3 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(oneTimeKey);
        return wire.wire__crate__bindings__vodozemac_account_create_outbound_session(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountCreateOutboundSessionConstMeta,
      argValues: [that, config, identityKey, oneTimeKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountCreateOutboundSessionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_create_outbound_session",
        argNames: ["that", "config", "identityKey", "oneTimeKey"],
      );

  @override
  VodozemacCurve25519PublicKey crateBindingsVodozemacAccountCurve25519Key({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_curve25519_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountCurve25519KeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountCurve25519KeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_curve25519_key",
        argNames: ["that"],
      );

  @override
  VodozemacEd25519PublicKey crateBindingsVodozemacAccountEd25519Key({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_ed25519_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountEd25519KeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountEd25519KeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_ed25519_key",
        argNames: ["that"],
      );

  @override
  List<VodozemacOneTimeKey> crateBindingsVodozemacAccountFallbackKey({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_fallback_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_vodozemac_one_time_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_fallback_key",
        argNames: ["that"],
      );

  @override
  bool crateBindingsVodozemacAccountForgetFallbackKey({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_forget_fallback_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountForgetFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountForgetFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_forget_fallback_key",
        argNames: ["that"],
      );

  @override
  VodozemacAccount crateBindingsVodozemacAccountFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__bindings__vodozemac_account_from_olm_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacAccountFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacAccount crateBindingsVodozemacAccountFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_account_from_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacAccountFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  String? crateBindingsVodozemacAccountGenerateFallbackKey({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_generate_fallback_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountGenerateFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountGenerateFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_generate_fallback_key",
        argNames: ["that"],
      );

  @override
  void crateBindingsVodozemacAccountGenerateOneTimeKeys({required VodozemacAccount that, required BigInt count}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_usize(count);
        return wire.wire__crate__bindings__vodozemac_account_generate_one_time_keys(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountGenerateOneTimeKeysConstMeta,
      argValues: [that, count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountGenerateOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_generate_one_time_keys",
        argNames: ["that", "count"],
      );

  @override
  VodozemacIdentityKeys crateBindingsVodozemacAccountIdentityKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_identity_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_identity_keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountIdentityKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountIdentityKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_identity_keys",
        argNames: ["that"],
      );

  @override
  void crateBindingsVodozemacAccountMarkKeysAsPublished({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_mark_keys_as_published(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountMarkKeysAsPublishedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountMarkKeysAsPublishedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_mark_keys_as_published",
        argNames: ["that"],
      );

  @override
  BigInt crateBindingsVodozemacAccountMaxNumberOfOneTimeKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_max_number_of_one_time_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountMaxNumberOfOneTimeKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountMaxNumberOfOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_max_number_of_one_time_keys",
        argNames: ["that"],
      );

  @override
  VodozemacAccount crateBindingsVodozemacAccountNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_account_new();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_new",
        argNames: [],
      );

  @override
  List<VodozemacOneTimeKey> crateBindingsVodozemacAccountOneTimeKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__bindings__vodozemac_account_one_time_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_vodozemac_one_time_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountOneTimeKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_one_time_keys",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacAccountPickleEncrypted({required VodozemacAccount that, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_account_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  VodozemacEd25519Signature crateBindingsVodozemacAccountSign(
      {required VodozemacAccount that, required String message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_String(message);
        return wire.wire__crate__bindings__vodozemac_account_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacAccountSignConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacAccountSignConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_sign",
        argNames: ["that", "message"],
      );

  @override
  U8Array32 crateBindingsVodozemacCurve25519PublicKeyAsBytes({required VodozemacCurve25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(that);
        return wire.wire__crate__bindings__vodozemac_curve_25519_public_key_as_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacCurve25519PublicKeyAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacCurve25519PublicKeyAsBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_as_bytes",
        argNames: ["that"],
      );

  @override
  VodozemacCurve25519PublicKey crateBindingsVodozemacCurve25519PublicKeyFromBase64({required String base64Key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(base64Key);
        return wire.wire__crate__bindings__vodozemac_curve_25519_public_key_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacCurve25519PublicKeyFromBase64ConstMeta,
      argValues: [base64Key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacCurve25519PublicKeyFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_from_base64",
        argNames: ["base64Key"],
      );

  @override
  VodozemacCurve25519PublicKey crateBindingsVodozemacCurve25519PublicKeyFromSlice({required U8Array32 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(bytes);
        return wire.wire__crate__bindings__vodozemac_curve_25519_public_key_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacCurve25519PublicKeyFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacCurve25519PublicKeyFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateBindingsVodozemacCurve25519PublicKeyToBase64({required VodozemacCurve25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(that);
        return wire.wire__crate__bindings__vodozemac_curve_25519_public_key_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacCurve25519PublicKeyToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacCurve25519PublicKeyToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_to_base64",
        argNames: ["that"],
      );

  @override
  U8Array32 crateBindingsVodozemacEd25519PublicKeyAsBytes({required VodozemacEd25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        return wire.wire__crate__bindings__vodozemac_ed_25519_public_key_as_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacEd25519PublicKeyAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519PublicKeyAsBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_as_bytes",
        argNames: ["that"],
      );

  @override
  VodozemacEd25519PublicKey crateBindingsVodozemacEd25519PublicKeyFromBase64({required String base64Key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(base64Key);
        return wire.wire__crate__bindings__vodozemac_ed_25519_public_key_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEd25519PublicKeyFromBase64ConstMeta,
      argValues: [base64Key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519PublicKeyFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_from_base64",
        argNames: ["base64Key"],
      );

  @override
  VodozemacEd25519PublicKey crateBindingsVodozemacEd25519PublicKeyFromSlice({required U8Array32 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(bytes);
        return wire.wire__crate__bindings__vodozemac_ed_25519_public_key_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEd25519PublicKeyFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519PublicKeyFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateBindingsVodozemacEd25519PublicKeyToBase64({required VodozemacEd25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        return wire.wire__crate__bindings__vodozemac_ed_25519_public_key_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacEd25519PublicKeyToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519PublicKeyToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_to_base64",
        argNames: ["that"],
      );

  @override
  void crateBindingsVodozemacEd25519PublicKeyVerify(
      {required VodozemacEd25519PublicKey that,
      required String message,
      required VodozemacEd25519Signature signature}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        var arg1 = cst_encode_String(message);
        var arg2 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(signature);
        return wire.wire__crate__bindings__vodozemac_ed_25519_public_key_verify(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEd25519PublicKeyVerifyConstMeta,
      argValues: [that, message, signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519PublicKeyVerifyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_verify",
        argNames: ["that", "message", "signature"],
      );

  @override
  VodozemacEd25519Signature crateBindingsVodozemacEd25519SignatureFromBase64({required String signature}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(signature);
        return wire.wire__crate__bindings__vodozemac_ed_25519_signature_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEd25519SignatureFromBase64ConstMeta,
      argValues: [signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519SignatureFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_from_base64",
        argNames: ["signature"],
      );

  @override
  VodozemacEd25519Signature crateBindingsVodozemacEd25519SignatureFromSlice({required U8Array64 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_64(bytes);
        return wire.wire__crate__bindings__vodozemac_ed_25519_signature_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEd25519SignatureFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519SignatureFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateBindingsVodozemacEd25519SignatureToBase64({required VodozemacEd25519Signature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(that);
        return wire.wire__crate__bindings__vodozemac_ed_25519_signature_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacEd25519SignatureToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519SignatureToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_to_base64",
        argNames: ["that"],
      );

  @override
  U8Array64 crateBindingsVodozemacEd25519SignatureToBytes({required VodozemacEd25519Signature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(that);
        return wire.wire__crate__bindings__vodozemac_ed_25519_signature_to_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacEd25519SignatureToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEd25519SignatureToBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_to_bytes",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacEstablishedSasCalculateMac(
      {required VodozemacEstablishedSas that, required String input, required String info}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_established_sas(that);
        var arg1 = cst_encode_String(input);
        var arg2 = cst_encode_String(info);
        return wire.wire__crate__bindings__vodozemac_established_sas_calculate_mac(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEstablishedSasCalculateMacConstMeta,
      argValues: [that, input, info],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEstablishedSasCalculateMacConstMeta => const TaskConstMeta(
        debugName: "vodozemac_established_sas_calculate_mac",
        argNames: ["that", "input", "info"],
      );

  @override
  String crateBindingsVodozemacEstablishedSasCalculateMacDeprecated(
      {required VodozemacEstablishedSas that, required String input, required String info}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_established_sas(that);
        var arg1 = cst_encode_String(input);
        var arg2 = cst_encode_String(info);
        return wire.wire__crate__bindings__vodozemac_established_sas_calculate_mac_deprecated(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEstablishedSasCalculateMacDeprecatedConstMeta,
      argValues: [that, input, info],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEstablishedSasCalculateMacDeprecatedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_established_sas_calculate_mac_deprecated",
        argNames: ["that", "input", "info"],
      );

  @override
  Uint8List crateBindingsVodozemacEstablishedSasGenerateBytes(
      {required VodozemacEstablishedSas that, required String info, required int length}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_established_sas(that);
        var arg1 = cst_encode_String(info);
        var arg2 = cst_encode_u_32(length);
        return wire.wire__crate__bindings__vodozemac_established_sas_generate_bytes(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEstablishedSasGenerateBytesConstMeta,
      argValues: [that, info, length],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEstablishedSasGenerateBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_established_sas_generate_bytes",
        argNames: ["that", "info", "length"],
      );

  @override
  void crateBindingsVodozemacEstablishedSasVerifyMac(
      {required VodozemacEstablishedSas that, required String input, required String info, required String mac}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_established_sas(that);
        var arg1 = cst_encode_String(input);
        var arg2 = cst_encode_String(info);
        var arg3 = cst_encode_String(mac);
        return wire.wire__crate__bindings__vodozemac_established_sas_verify_mac(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacEstablishedSasVerifyMacConstMeta,
      argValues: [that, input, info, mac],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacEstablishedSasVerifyMacConstMeta => const TaskConstMeta(
        debugName: "vodozemac_established_sas_verify_mac",
        argNames: ["that", "input", "info", "mac"],
      );

  @override
  String crateBindingsVodozemacGroupSessionEncrypt({required VodozemacGroupSession that, required String plaintext}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire__crate__bindings__vodozemac_group_session_encrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionEncryptConstMeta,
      argValues: [that, plaintext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionEncryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_encrypt",
        argNames: ["that", "plaintext"],
      );

  @override
  VodozemacGroupSession crateBindingsVodozemacGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__bindings__vodozemac_group_session_from_olm_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacGroupSession crateBindingsVodozemacGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_group_session_from_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  int crateBindingsVodozemacGroupSessionMessageIndex({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__bindings__vodozemac_group_session_message_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionMessageIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionMessageIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_message_index",
        argNames: ["that"],
      );

  @override
  VodozemacGroupSession crateBindingsVodozemacGroupSessionNew({required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__bindings__vodozemac_group_session_new(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionNewConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_new",
        argNames: ["config"],
      );

  @override
  String crateBindingsVodozemacGroupSessionPickleEncrypted(
      {required VodozemacGroupSession that, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_group_session_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  VodozemacMegolmSessionConfig crateBindingsVodozemacGroupSessionSessionConfig({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__bindings__vodozemac_group_session_session_config(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionSessionConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionSessionConfigConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_config",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacGroupSessionSessionId({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__bindings__vodozemac_group_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_id",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacGroupSessionSessionKey({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__bindings__vodozemac_group_session_session_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionSessionKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionSessionKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_key",
        argNames: ["that"],
      );

  @override
  VodozemacInboundGroupSession crateBindingsVodozemacGroupSessionToInbound({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__bindings__vodozemac_group_session_to_inbound(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacGroupSessionToInboundConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacGroupSessionToInboundConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_to_inbound",
        argNames: ["that"],
      );

  @override
  DecryptResult crateBindingsVodozemacInboundGroupSessionDecrypt(
      {required VodozemacInboundGroupSession that, required String encrypted}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_String(encrypted);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_decrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_decrypt_result,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionDecryptConstMeta,
      argValues: [that, encrypted],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionDecryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_decrypt",
        argNames: ["that", "encrypted"],
      );

  @override
  String? crateBindingsVodozemacInboundGroupSessionExportAt(
      {required VodozemacInboundGroupSession that, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_u_32(index);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_export_at(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionExportAtConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionExportAtConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_export_at",
        argNames: ["that", "index"],
      );

  @override
  String crateBindingsVodozemacInboundGroupSessionExportAtFirstKnownIndex(
      {required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_export_at_first_known_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionExportAtFirstKnownIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionExportAtFirstKnownIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_export_at_first_known_index",
        argNames: ["that"],
      );

  @override
  int crateBindingsVodozemacInboundGroupSessionFirstKnownIndex({required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_first_known_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionFirstKnownIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionFirstKnownIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_first_known_index",
        argNames: ["that"],
      );

  @override
  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_from_olm_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_from_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionImport(
      {required String exportedSessionKey, required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(exportedSessionKey);
        var arg1 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_import(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionImportConstMeta,
      argValues: [exportedSessionKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionImportConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_import",
        argNames: ["exportedSessionKey", "config"],
      );

  @override
  VodozemacInboundGroupSession crateBindingsVodozemacInboundGroupSessionNew(
      {required String sessionKey, required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sessionKey);
        var arg1 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionNewConstMeta,
      argValues: [sessionKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_new",
        argNames: ["sessionKey", "config"],
      );

  @override
  String crateBindingsVodozemacInboundGroupSessionPickleEncrypted(
      {required VodozemacInboundGroupSession that, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  String crateBindingsVodozemacInboundGroupSessionSessionId({required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__bindings__vodozemac_inbound_group_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacInboundGroupSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacInboundGroupSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_session_id",
        argNames: ["that"],
      );

  @override
  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigDef() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_megolm_session_config_def();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacMegolmSessionConfigDefConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacMegolmSessionConfigDefConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_def",
        argNames: [],
      );

  @override
  int crateBindingsVodozemacMegolmSessionConfigVersion({required VodozemacMegolmSessionConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_megolm_session_config(that);
        return wire.wire__crate__bindings__vodozemac_megolm_session_config_version(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacMegolmSessionConfigVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacMegolmSessionConfigVersionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version",
        argNames: ["that"],
      );

  @override
  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigVersion1() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_megolm_session_config_version_1();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacMegolmSessionConfigVersion1ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacMegolmSessionConfigVersion1ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version_1",
        argNames: [],
      );

  @override
  VodozemacMegolmSessionConfig crateBindingsVodozemacMegolmSessionConfigVersion2() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_megolm_session_config_version_2();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacMegolmSessionConfigVersion2ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacMegolmSessionConfigVersion2ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version_2",
        argNames: [],
      );

  @override
  VodozemacOlmMessage crateBindingsVodozemacOlmMessageFromParts(
      {required BigInt messageType, required String ciphertext}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_usize(messageType);
        var arg1 = cst_encode_String(ciphertext);
        return wire.wire__crate__bindings__vodozemac_olm_message_from_parts(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_message,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacOlmMessageFromPartsConstMeta,
      argValues: [messageType, ciphertext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmMessageFromPartsConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_from_parts",
        argNames: ["messageType", "ciphertext"],
      );

  @override
  String crateBindingsVodozemacOlmMessageMessage({required VodozemacOlmMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_message(that);
        return wire.wire__crate__bindings__vodozemac_olm_message_message(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmMessageMessageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmMessageMessageConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_message",
        argNames: ["that"],
      );

  @override
  BigInt crateBindingsVodozemacOlmMessageMessageType({required VodozemacOlmMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_message(that);
        return wire.wire__crate__bindings__vodozemac_olm_message_message_type(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmMessageMessageTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmMessageMessageTypeConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_message_type",
        argNames: ["that"],
      );

  @override
  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigDef() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_olm_session_config_def();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmSessionConfigDefConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmSessionConfigDefConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_def",
        argNames: [],
      );

  @override
  int crateBindingsVodozemacOlmSessionConfigVersion({required VodozemacOlmSessionConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_session_config(that);
        return wire.wire__crate__bindings__vodozemac_olm_session_config_version(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmSessionConfigVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmSessionConfigVersionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version",
        argNames: ["that"],
      );

  @override
  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigVersion1() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_olm_session_config_version_1();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmSessionConfigVersion1ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmSessionConfigVersion1ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version_1",
        argNames: [],
      );

  @override
  VodozemacOlmSessionConfig crateBindingsVodozemacOlmSessionConfigVersion2() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_olm_session_config_version_2();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacOlmSessionConfigVersion2ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacOlmSessionConfigVersion2ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version_2",
        argNames: [],
      );

  @override
  String crateBindingsVodozemacPkDecryptionDecrypt(
      {required VodozemacPkDecryption that, required VodozemacPkMessage message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_decryption(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_pk_message(message);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_decrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionDecryptConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionDecryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_decrypt",
        argNames: ["that", "message"],
      );

  @override
  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionFromKey({required U8Array32 secretKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(secretKey);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_from_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_decryption,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionFromKeyConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionFromKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_from_key",
        argNames: ["secretKey"],
      );

  @override
  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionFromLibolmPickle(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_from_libolm_pickle(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_decryption,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionFromLibolmPickleConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionFromLibolmPickleConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_from_libolm_pickle",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacPkDecryption crateBindingsVodozemacPkDecryptionNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__bindings__vodozemac_pk_decryption_new();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_decryption,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_new",
        argNames: [],
      );

  @override
  Uint8List crateBindingsVodozemacPkDecryptionPrivateKey({required VodozemacPkDecryption that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_decryption(that);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_private_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionPrivateKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionPrivateKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_private_key",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacPkDecryptionPublicKey({required VodozemacPkDecryption that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_decryption(that);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_public_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionPublicKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_public_key",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacPkDecryptionToLibolmPickle(
      {required VodozemacPkDecryption that, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_decryption(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_pk_decryption_to_libolm_pickle(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkDecryptionToLibolmPickleConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkDecryptionToLibolmPickleConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_decryption_to_libolm_pickle",
        argNames: ["that", "pickleKey"],
      );

  @override
  VodozemacPkMessage crateBindingsVodozemacPkEncryptionEncrypt(
      {required VodozemacPkEncryption that, required String message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_encryption(that);
        var arg1 = cst_encode_String(message);
        return wire.wire__crate__bindings__vodozemac_pk_encryption_encrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkEncryptionEncryptConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkEncryptionEncryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_encryption_encrypt",
        argNames: ["that", "message"],
      );

  @override
  VodozemacPkEncryption crateBindingsVodozemacPkEncryptionFromKey({required VodozemacCurve25519PublicKey publicKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(publicKey);
        return wire.wire__crate__bindings__vodozemac_pk_encryption_from_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_encryption,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkEncryptionFromKeyConstMeta,
      argValues: [publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkEncryptionFromKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_encryption_from_key",
        argNames: ["publicKey"],
      );

  @override
  VodozemacPkMessage crateBindingsVodozemacPkMessageFromBase64(
      {required String ciphertext, required String mac, required String ephemeralKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(ciphertext);
        var arg1 = cst_encode_String(mac);
        var arg2 = cst_encode_String(ephemeralKey);
        return wire.wire__crate__bindings__vodozemac_pk_message_from_base64(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_message,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacPkMessageFromBase64ConstMeta,
      argValues: [ciphertext, mac, ephemeralKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkMessageFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_message_from_base64",
        argNames: ["ciphertext", "mac", "ephemeralKey"],
      );

  @override
  VodozemacPkMessage crateBindingsVodozemacPkMessageNew(
      {required List<int> ciphertext, required List<int> mac, required VodozemacCurve25519PublicKey ephemeralKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8_loose(ciphertext);
        var arg1 = cst_encode_list_prim_u_8_loose(mac);
        var arg2 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(ephemeralKey);
        return wire.wire__crate__bindings__vodozemac_pk_message_new(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_pk_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacPkMessageNewConstMeta,
      argValues: [ciphertext, mac, ephemeralKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkMessageNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_message_new",
        argNames: ["ciphertext", "mac", "ephemeralKey"],
      );

  @override
  (String, String, String) crateBindingsVodozemacPkMessageToBase64({required VodozemacPkMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_pk_message(that);
        return wire.wire__crate__bindings__vodozemac_pk_message_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_string_string_string,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacPkMessageToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacPkMessageToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_pk_message_to_base64",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacSessionDecrypt({required VodozemacSession that, required VodozemacOlmMessage message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_olm_message(message);
        return wire.wire__crate__bindings__vodozemac_session_decrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacSessionDecryptConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionDecryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_decrypt",
        argNames: ["that", "message"],
      );

  @override
  VodozemacOlmMessage crateBindingsVodozemacSessionEncrypt(
      {required VodozemacSession that, required String plaintext}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire__crate__bindings__vodozemac_session_encrypt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSessionEncryptConstMeta,
      argValues: [that, plaintext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionEncryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_encrypt",
        argNames: ["that", "plaintext"],
      );

  @override
  VodozemacSession crateBindingsVodozemacSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__bindings__vodozemac_session_from_olm_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacSession crateBindingsVodozemacSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_session_from_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateBindingsVodozemacSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  bool crateBindingsVodozemacSessionHasReceivedMessage({required VodozemacSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__bindings__vodozemac_session_has_received_message(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSessionHasReceivedMessageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionHasReceivedMessageConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_has_received_message",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacSessionPickleEncrypted({required VodozemacSession that, required U8Array32 pickleKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__bindings__vodozemac_session_pickle_encrypted(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  VodozemacOlmSessionConfig crateBindingsVodozemacSessionSessionConfig({required VodozemacSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__bindings__vodozemac_session_session_config(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSessionSessionConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionSessionConfigConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_session_config",
        argNames: ["that"],
      );

  @override
  String crateBindingsVodozemacSessionSessionId({required VodozemacSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__bindings__vodozemac_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateBindingsVodozemacSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBindingsVodozemacSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_session_id",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Curve25519PublicKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_Curve25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Curve25519PublicKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Curve25519PublicKey;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519PublicKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_Ed25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519PublicKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Ed25519PublicKey;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519Signature =>
      wire.rust_arc_increment_strong_count_RustOpaque_Ed25519Signature;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519Signature =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Ed25519Signature;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_EstablishedSas =>
      wire.rust_arc_increment_strong_count_RustOpaque_EstablishedSas;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_EstablishedSas =>
      wire.rust_arc_decrement_strong_count_RustOpaque_EstablishedSas;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MegolmSessionConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_MegolmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MegolmSessionConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_MegolmSessionConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmMessage =>
      wire.rust_arc_increment_strong_count_RustOpaque_OlmMessage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmMessage =>
      wire.rust_arc_decrement_strong_count_RustOpaque_OlmMessage;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmSessionConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_OlmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmSessionConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_OlmSessionConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkDecryption =>
      wire.rust_arc_increment_strong_count_RustOpaque_PkDecryption;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkDecryption =>
      wire.rust_arc_decrement_strong_count_RustOpaque_PkDecryption;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkEncryption =>
      wire.rust_arc_increment_strong_count_RustOpaque_PkEncryption;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkEncryption =>
      wire.rust_arc_decrement_strong_count_RustOpaque_PkEncryption;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockGroupSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockGroupSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockGroupSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockInboundGroupSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockInboundGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockInboundGroupSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockInboundGroupSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PkSigning =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PkSigning =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_VodozemacSas =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_VodozemacSas =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockAccount =>
      wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockAccount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockAccount =>
      wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockAccount;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  PkSigning dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkSigningImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VodozemacSas dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkSigning dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkSigningImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VodozemacSas dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Curve25519PublicKey dco_decode_RustOpaque_Curve25519PublicKey(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Curve25519PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ed25519PublicKey dco_decode_RustOpaque_Ed25519PublicKey(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ed25519PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ed25519Signature dco_decode_RustOpaque_Ed25519Signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ed25519SignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EstablishedSas dco_decode_RustOpaque_EstablishedSas(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EstablishedSasImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MegolmSessionConfig dco_decode_RustOpaque_MegolmSessionConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MegolmSessionConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OlmMessage dco_decode_RustOpaque_OlmMessage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OlmMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OlmSessionConfig dco_decode_RustOpaque_OlmSessionConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OlmSessionConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkDecryption dco_decode_RustOpaque_PkDecryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkDecryptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkEncryption dco_decode_RustOpaque_PkEncryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkEncryptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockGroupSession dco_decode_RustOpaque_RwLockGroupSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockGroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockInboundGroupSession dco_decode_RustOpaque_RwLockInboundGroupSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockInboundGroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockSession dco_decode_RustOpaque_RwLockSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkSigning dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkSigningImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VodozemacSas dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockAccount dco_decode_RustOpaque_stdsyncRwLockAccount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  VodozemacAccount dco_decode_box_autoadd_vodozemac_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_account(raw);
  }

  @protected
  VodozemacCurve25519PublicKey dco_decode_box_autoadd_vodozemac_curve_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_curve_25519_public_key(raw);
  }

  @protected
  VodozemacEd25519PublicKey dco_decode_box_autoadd_vodozemac_ed_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_ed_25519_public_key(raw);
  }

  @protected
  VodozemacEd25519Signature dco_decode_box_autoadd_vodozemac_ed_25519_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_ed_25519_signature(raw);
  }

  @protected
  VodozemacEstablishedSas dco_decode_box_autoadd_vodozemac_established_sas(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_established_sas(raw);
  }

  @protected
  VodozemacGroupSession dco_decode_box_autoadd_vodozemac_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_group_session(raw);
  }

  @protected
  VodozemacInboundGroupSession dco_decode_box_autoadd_vodozemac_inbound_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_inbound_group_session(raw);
  }

  @protected
  VodozemacMegolmSessionConfig dco_decode_box_autoadd_vodozemac_megolm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_megolm_session_config(raw);
  }

  @protected
  VodozemacOlmMessage dco_decode_box_autoadd_vodozemac_olm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_olm_message(raw);
  }

  @protected
  VodozemacOlmSessionConfig dco_decode_box_autoadd_vodozemac_olm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_olm_session_config(raw);
  }

  @protected
  VodozemacPkDecryption dco_decode_box_autoadd_vodozemac_pk_decryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_pk_decryption(raw);
  }

  @protected
  VodozemacPkEncryption dco_decode_box_autoadd_vodozemac_pk_encryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_pk_encryption(raw);
  }

  @protected
  VodozemacPkMessage dco_decode_box_autoadd_vodozemac_pk_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_pk_message(raw);
  }

  @protected
  VodozemacSession dco_decode_box_autoadd_vodozemac_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_session(raw);
  }

  @protected
  DecryptResult dco_decode_decrypt_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DecryptResult(
      field0: dco_decode_String(arr[0]),
      field1: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<VodozemacOneTimeKey> dco_decode_list_vodozemac_one_time_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_vodozemac_one_time_key).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String, String, String) dco_decode_record_string_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array64(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VodozemacAccount dco_decode_vodozemac_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacAccount.raw(
      account: dco_decode_RustOpaque_stdsyncRwLockAccount(arr[0]),
    );
  }

  @protected
  VodozemacCurve25519PublicKey dco_decode_vodozemac_curve_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacCurve25519PublicKey(
      key: dco_decode_RustOpaque_Curve25519PublicKey(arr[0]),
    );
  }

  @protected
  VodozemacEd25519PublicKey dco_decode_vodozemac_ed_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacEd25519PublicKey(
      key: dco_decode_RustOpaque_Ed25519PublicKey(arr[0]),
    );
  }

  @protected
  VodozemacEd25519Signature dco_decode_vodozemac_ed_25519_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacEd25519Signature(
      signature: dco_decode_RustOpaque_Ed25519Signature(arr[0]),
    );
  }

  @protected
  VodozemacEstablishedSas dco_decode_vodozemac_established_sas(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacEstablishedSas(
      establishedSas: dco_decode_RustOpaque_EstablishedSas(arr[0]),
    );
  }

  @protected
  VodozemacGroupSession dco_decode_vodozemac_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacGroupSession.raw(
      session: dco_decode_RustOpaque_RwLockGroupSession(arr[0]),
    );
  }

  @protected
  VodozemacIdentityKeys dco_decode_vodozemac_identity_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacIdentityKeys(
      ed25519: dco_decode_vodozemac_ed_25519_public_key(arr[0]),
      curve25519: dco_decode_vodozemac_curve_25519_public_key(arr[1]),
    );
  }

  @protected
  VodozemacInboundGroupSession dco_decode_vodozemac_inbound_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacInboundGroupSession.raw(
      session: dco_decode_RustOpaque_RwLockInboundGroupSession(arr[0]),
    );
  }

  @protected
  VodozemacMegolmSessionConfig dco_decode_vodozemac_megolm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacMegolmSessionConfig(
      config: dco_decode_RustOpaque_MegolmSessionConfig(arr[0]),
    );
  }

  @protected
  VodozemacOlmMessage dco_decode_vodozemac_olm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacOlmMessage(
      msg: dco_decode_RustOpaque_OlmMessage(arr[0]),
    );
  }

  @protected
  VodozemacOlmSessionConfig dco_decode_vodozemac_olm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacOlmSessionConfig(
      config: dco_decode_RustOpaque_OlmSessionConfig(arr[0]),
    );
  }

  @protected
  VodozemacOlmSessionCreationResult dco_decode_vodozemac_olm_session_creation_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacOlmSessionCreationResult(
      session: dco_decode_vodozemac_session(arr[0]),
      plaintext: dco_decode_String(arr[1]),
    );
  }

  @protected
  VodozemacOneTimeKey dco_decode_vodozemac_one_time_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacOneTimeKey(
      keyid: dco_decode_String(arr[0]),
      key: dco_decode_vodozemac_curve_25519_public_key(arr[1]),
    );
  }

  @protected
  VodozemacPkDecryption dco_decode_vodozemac_pk_decryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacPkDecryption.raw(
      pkDecryption: dco_decode_RustOpaque_PkDecryption(arr[0]),
    );
  }

  @protected
  VodozemacPkEncryption dco_decode_vodozemac_pk_encryption(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacPkEncryption(
      pkEncryption: dco_decode_RustOpaque_PkEncryption(arr[0]),
    );
  }

  @protected
  VodozemacPkMessage dco_decode_vodozemac_pk_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VodozemacPkMessage.raw(
      ciphertext: dco_decode_list_prim_u_8_strict(arr[0]),
      mac: dco_decode_list_prim_u_8_strict(arr[1]),
      ephemeralKey: dco_decode_vodozemac_curve_25519_public_key(arr[2]),
    );
  }

  @protected
  VodozemacSession dco_decode_vodozemac_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacSession(
      session: dco_decode_RustOpaque_RwLockSession(arr[0]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  PkSigning sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkSigningImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VodozemacSas sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkSigning sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkSigningImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VodozemacSas sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Curve25519PublicKey sse_decode_RustOpaque_Curve25519PublicKey(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Curve25519PublicKeyImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ed25519PublicKey sse_decode_RustOpaque_Ed25519PublicKey(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ed25519PublicKeyImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ed25519Signature sse_decode_RustOpaque_Ed25519Signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ed25519SignatureImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EstablishedSas sse_decode_RustOpaque_EstablishedSas(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EstablishedSasImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MegolmSessionConfig sse_decode_RustOpaque_MegolmSessionConfig(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MegolmSessionConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OlmMessage sse_decode_RustOpaque_OlmMessage(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OlmMessageImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OlmSessionConfig sse_decode_RustOpaque_OlmSessionConfig(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OlmSessionConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkDecryption sse_decode_RustOpaque_PkDecryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkDecryptionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkEncryption sse_decode_RustOpaque_PkEncryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkEncryptionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockGroupSession sse_decode_RustOpaque_RwLockGroupSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockGroupSessionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockInboundGroupSession sse_decode_RustOpaque_RwLockInboundGroupSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockInboundGroupSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockSession sse_decode_RustOpaque_RwLockSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockSessionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkSigning sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkSigningImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VodozemacSas sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VodozemacSasImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockAccount sse_decode_RustOpaque_stdsyncRwLockAccount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockAccountImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  VodozemacAccount sse_decode_box_autoadd_vodozemac_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_account(deserializer));
  }

  @protected
  VodozemacCurve25519PublicKey sse_decode_box_autoadd_vodozemac_curve_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_curve_25519_public_key(deserializer));
  }

  @protected
  VodozemacEd25519PublicKey sse_decode_box_autoadd_vodozemac_ed_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_ed_25519_public_key(deserializer));
  }

  @protected
  VodozemacEd25519Signature sse_decode_box_autoadd_vodozemac_ed_25519_signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_ed_25519_signature(deserializer));
  }

  @protected
  VodozemacEstablishedSas sse_decode_box_autoadd_vodozemac_established_sas(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_established_sas(deserializer));
  }

  @protected
  VodozemacGroupSession sse_decode_box_autoadd_vodozemac_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_group_session(deserializer));
  }

  @protected
  VodozemacInboundGroupSession sse_decode_box_autoadd_vodozemac_inbound_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_inbound_group_session(deserializer));
  }

  @protected
  VodozemacMegolmSessionConfig sse_decode_box_autoadd_vodozemac_megolm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_megolm_session_config(deserializer));
  }

  @protected
  VodozemacOlmMessage sse_decode_box_autoadd_vodozemac_olm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_olm_message(deserializer));
  }

  @protected
  VodozemacOlmSessionConfig sse_decode_box_autoadd_vodozemac_olm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_olm_session_config(deserializer));
  }

  @protected
  VodozemacPkDecryption sse_decode_box_autoadd_vodozemac_pk_decryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_pk_decryption(deserializer));
  }

  @protected
  VodozemacPkEncryption sse_decode_box_autoadd_vodozemac_pk_encryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_pk_encryption(deserializer));
  }

  @protected
  VodozemacPkMessage sse_decode_box_autoadd_vodozemac_pk_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_pk_message(deserializer));
  }

  @protected
  VodozemacSession sse_decode_box_autoadd_vodozemac_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_session(deserializer));
  }

  @protected
  DecryptResult sse_decode_decrypt_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return DecryptResult(field0: var_field0, field1: var_field1);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<VodozemacOneTimeKey> sse_decode_list_vodozemac_one_time_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <VodozemacOneTimeKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_vodozemac_one_time_key(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String, String) sse_decode_record_string_string_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_String(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array64(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VodozemacAccount sse_decode_vodozemac_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_account = sse_decode_RustOpaque_stdsyncRwLockAccount(deserializer);
    return VodozemacAccount.raw(account: var_account);
  }

  @protected
  VodozemacCurve25519PublicKey sse_decode_vodozemac_curve_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_RustOpaque_Curve25519PublicKey(deserializer);
    return VodozemacCurve25519PublicKey(key: var_key);
  }

  @protected
  VodozemacEd25519PublicKey sse_decode_vodozemac_ed_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_RustOpaque_Ed25519PublicKey(deserializer);
    return VodozemacEd25519PublicKey(key: var_key);
  }

  @protected
  VodozemacEd25519Signature sse_decode_vodozemac_ed_25519_signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signature = sse_decode_RustOpaque_Ed25519Signature(deserializer);
    return VodozemacEd25519Signature(signature: var_signature);
  }

  @protected
  VodozemacEstablishedSas sse_decode_vodozemac_established_sas(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_establishedSas = sse_decode_RustOpaque_EstablishedSas(deserializer);
    return VodozemacEstablishedSas(establishedSas: var_establishedSas);
  }

  @protected
  VodozemacGroupSession sse_decode_vodozemac_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockGroupSession(deserializer);
    return VodozemacGroupSession.raw(session: var_session);
  }

  @protected
  VodozemacIdentityKeys sse_decode_vodozemac_identity_keys(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ed25519 = sse_decode_vodozemac_ed_25519_public_key(deserializer);
    var var_curve25519 = sse_decode_vodozemac_curve_25519_public_key(deserializer);
    return VodozemacIdentityKeys(ed25519: var_ed25519, curve25519: var_curve25519);
  }

  @protected
  VodozemacInboundGroupSession sse_decode_vodozemac_inbound_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockInboundGroupSession(deserializer);
    return VodozemacInboundGroupSession.raw(session: var_session);
  }

  @protected
  VodozemacMegolmSessionConfig sse_decode_vodozemac_megolm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_config = sse_decode_RustOpaque_MegolmSessionConfig(deserializer);
    return VodozemacMegolmSessionConfig(config: var_config);
  }

  @protected
  VodozemacOlmMessage sse_decode_vodozemac_olm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_msg = sse_decode_RustOpaque_OlmMessage(deserializer);
    return VodozemacOlmMessage(msg: var_msg);
  }

  @protected
  VodozemacOlmSessionConfig sse_decode_vodozemac_olm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_config = sse_decode_RustOpaque_OlmSessionConfig(deserializer);
    return VodozemacOlmSessionConfig(config: var_config);
  }

  @protected
  VodozemacOlmSessionCreationResult sse_decode_vodozemac_olm_session_creation_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_vodozemac_session(deserializer);
    var var_plaintext = sse_decode_String(deserializer);
    return VodozemacOlmSessionCreationResult(session: var_session, plaintext: var_plaintext);
  }

  @protected
  VodozemacOneTimeKey sse_decode_vodozemac_one_time_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_keyid = sse_decode_String(deserializer);
    var var_key = sse_decode_vodozemac_curve_25519_public_key(deserializer);
    return VodozemacOneTimeKey(keyid: var_keyid, key: var_key);
  }

  @protected
  VodozemacPkDecryption sse_decode_vodozemac_pk_decryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pkDecryption = sse_decode_RustOpaque_PkDecryption(deserializer);
    return VodozemacPkDecryption.raw(pkDecryption: var_pkDecryption);
  }

  @protected
  VodozemacPkEncryption sse_decode_vodozemac_pk_encryption(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pkEncryption = sse_decode_RustOpaque_PkEncryption(deserializer);
    return VodozemacPkEncryption(pkEncryption: var_pkEncryption);
  }

  @protected
  VodozemacPkMessage sse_decode_vodozemac_pk_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ciphertext = sse_decode_list_prim_u_8_strict(deserializer);
    var var_mac = sse_decode_list_prim_u_8_strict(deserializer);
    var var_ephemeralKey = sse_decode_vodozemac_curve_25519_public_key(deserializer);
    return VodozemacPkMessage.raw(ciphertext: var_ciphertext, mac: var_mac, ephemeralKey: var_ephemeralKey);
  }

  @protected
  VodozemacSession sse_decode_vodozemac_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockSession(deserializer);
    return VodozemacSession(session: var_session);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(PkSigning raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PkSigningImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      VodozemacSas raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as VodozemacSasImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(PkSigning raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PkSigningImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(VodozemacSas raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as VodozemacSasImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_Curve25519PublicKey(Curve25519PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Curve25519PublicKeyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Ed25519PublicKey(Ed25519PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Ed25519PublicKeyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Ed25519Signature(Ed25519Signature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Ed25519SignatureImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_EstablishedSas(EstablishedSas raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as EstablishedSasImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_MegolmSessionConfig(MegolmSessionConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MegolmSessionConfigImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_OlmMessage(OlmMessage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OlmMessageImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_OlmSessionConfig(OlmSessionConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OlmSessionConfigImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_PkDecryption(PkDecryption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PkDecryptionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_PkEncryption(PkEncryption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PkEncryptionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockGroupSession(RwLockGroupSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockGroupSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockInboundGroupSession(RwLockInboundGroupSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockInboundGroupSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockSession(RwLockSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(PkSigning raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PkSigningImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(VodozemacSas raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as VodozemacSasImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_stdsyncRwLockAccount(RwLockAccount raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockAccountImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      PkSigning self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as PkSigningImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      VodozemacSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as VodozemacSasImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      PkSigning self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as PkSigningImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      VodozemacSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as VodozemacSasImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Curve25519PublicKey(Curve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Curve25519PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Ed25519PublicKey(Ed25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Ed25519PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Ed25519Signature(Ed25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Ed25519SignatureImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_EstablishedSas(EstablishedSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as EstablishedSasImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MegolmSessionConfig(MegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as MegolmSessionConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_OlmMessage(OlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as OlmMessageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_OlmSessionConfig(OlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as OlmSessionConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_PkDecryption(PkDecryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as PkDecryptionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_PkEncryption(PkEncryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as PkEncryptionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockGroupSession(RwLockGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockGroupSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockInboundGroupSession(RwLockInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockInboundGroupSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockSession(RwLockSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkSigning(
      PkSigning self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as PkSigningImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVodozemacSas(
      VodozemacSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as VodozemacSasImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockAccount(RwLockAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockAccountImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_account(VodozemacAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_curve_25519_public_key(
      VodozemacCurve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_curve_25519_public_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_ed_25519_public_key(VodozemacEd25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_public_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_ed_25519_signature(VodozemacEd25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_signature(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_established_sas(VodozemacEstablishedSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_established_sas(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_group_session(VodozemacGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_group_session(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_inbound_group_session(
      VodozemacInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_inbound_group_session(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_megolm_session_config(
      VodozemacMegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_megolm_session_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_olm_message(VodozemacOlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_olm_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_olm_session_config(VodozemacOlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_olm_session_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_pk_decryption(VodozemacPkDecryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_pk_decryption(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_pk_encryption(VodozemacPkEncryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_pk_encryption(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_pk_message(VodozemacPkMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_pk_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_session(VodozemacSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_session(self, serializer);
  }

  @protected
  void sse_encode_decrypt_result(DecryptResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
    sse_encode_u_32(self.field1, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_vodozemac_one_time_key(List<VodozemacOneTimeKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_vodozemac_one_time_key(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string_string((String, String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_String(self.$3, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vodozemac_account(VodozemacAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_stdsyncRwLockAccount(self.account, serializer);
  }

  @protected
  void sse_encode_vodozemac_curve_25519_public_key(VodozemacCurve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Curve25519PublicKey(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_ed_25519_public_key(VodozemacEd25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Ed25519PublicKey(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_ed_25519_signature(VodozemacEd25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Ed25519Signature(self.signature, serializer);
  }

  @protected
  void sse_encode_vodozemac_established_sas(VodozemacEstablishedSas self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_EstablishedSas(self.establishedSas, serializer);
  }

  @protected
  void sse_encode_vodozemac_group_session(VodozemacGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockGroupSession(self.session, serializer);
  }

  @protected
  void sse_encode_vodozemac_identity_keys(VodozemacIdentityKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_public_key(self.ed25519, serializer);
    sse_encode_vodozemac_curve_25519_public_key(self.curve25519, serializer);
  }

  @protected
  void sse_encode_vodozemac_inbound_group_session(VodozemacInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockInboundGroupSession(self.session, serializer);
  }

  @protected
  void sse_encode_vodozemac_megolm_session_config(VodozemacMegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MegolmSessionConfig(self.config, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_message(VodozemacOlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_OlmMessage(self.msg, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_session_config(VodozemacOlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_OlmSessionConfig(self.config, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_session_creation_result(
      VodozemacOlmSessionCreationResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_session(self.session, serializer);
    sse_encode_String(self.plaintext, serializer);
  }

  @protected
  void sse_encode_vodozemac_one_time_key(VodozemacOneTimeKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.keyid, serializer);
    sse_encode_vodozemac_curve_25519_public_key(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_pk_decryption(VodozemacPkDecryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_PkDecryption(self.pkDecryption, serializer);
  }

  @protected
  void sse_encode_vodozemac_pk_encryption(VodozemacPkEncryption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_PkEncryption(self.pkEncryption, serializer);
  }

  @protected
  void sse_encode_vodozemac_pk_message(VodozemacPkMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.ciphertext, serializer);
    sse_encode_list_prim_u_8_strict(self.mac, serializer);
    sse_encode_vodozemac_curve_25519_public_key(self.ephemeralKey, serializer);
  }

  @protected
  void sse_encode_vodozemac_session(VodozemacSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockSession(self.session, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class Curve25519PublicKeyImpl extends RustOpaque implements Curve25519PublicKey {
  // Not to be used by end users
  Curve25519PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Curve25519PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Curve25519PublicKey,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Curve25519PublicKey,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Curve25519PublicKeyPtr,
  );
}

@sealed
class Ed25519PublicKeyImpl extends RustOpaque implements Ed25519PublicKey {
  // Not to be used by end users
  Ed25519PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ed25519PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Ed25519PublicKey,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519PublicKey,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519PublicKeyPtr,
  );
}

@sealed
class Ed25519SignatureImpl extends RustOpaque implements Ed25519Signature {
  // Not to be used by end users
  Ed25519SignatureImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ed25519SignatureImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Ed25519Signature,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519Signature,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519SignaturePtr,
  );
}

@sealed
class EstablishedSasImpl extends RustOpaque implements EstablishedSas {
  // Not to be used by end users
  EstablishedSasImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EstablishedSasImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_EstablishedSas,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_EstablishedSas,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_EstablishedSasPtr,
  );
}

@sealed
class MegolmSessionConfigImpl extends RustOpaque implements MegolmSessionConfig {
  // Not to be used by end users
  MegolmSessionConfigImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MegolmSessionConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_MegolmSessionConfig,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_MegolmSessionConfig,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_MegolmSessionConfigPtr,
  );
}

@sealed
class OlmMessageImpl extends RustOpaque implements OlmMessage {
  // Not to be used by end users
  OlmMessageImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OlmMessageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_OlmMessage,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_OlmMessage,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_OlmMessagePtr,
  );
}

@sealed
class OlmSessionConfigImpl extends RustOpaque implements OlmSessionConfig {
  // Not to be used by end users
  OlmSessionConfigImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OlmSessionConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_OlmSessionConfig,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_OlmSessionConfig,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_OlmSessionConfigPtr,
  );
}

@sealed
class PkDecryptionImpl extends RustOpaque implements PkDecryption {
  // Not to be used by end users
  PkDecryptionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PkDecryptionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PkDecryption,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PkDecryption,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PkDecryptionPtr,
  );
}

@sealed
class PkEncryptionImpl extends RustOpaque implements PkEncryption {
  // Not to be used by end users
  PkEncryptionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PkEncryptionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PkEncryption,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PkEncryption,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PkEncryptionPtr,
  );
}

@sealed
class PkSigningImpl extends RustOpaque implements PkSigning {
  // Not to be used by end users
  PkSigningImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PkSigningImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PkSigning,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PkSigning,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PkSigningPtr,
  );

  VodozemacEd25519PublicKey publicKey() => RustLib.instance.api.crateBindingsPkSigningPublicKey(
        that: this,
      );

  String secretKey() => RustLib.instance.api.crateBindingsPkSigningSecretKey(
        that: this,
      );

  VodozemacEd25519Signature sign({required String message}) =>
      RustLib.instance.api.crateBindingsPkSigningSign(that: this, message: message);
}

@sealed
class RwLockAccountImpl extends RustOpaque implements RwLockAccount {
  // Not to be used by end users
  RwLockAccountImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockAccountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockAccount,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockAccount,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockAccountPtr,
  );
}

@sealed
class RwLockGroupSessionImpl extends RustOpaque implements RwLockGroupSession {
  // Not to be used by end users
  RwLockGroupSessionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockGroupSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockGroupSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockGroupSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockGroupSessionPtr,
  );
}

@sealed
class RwLockInboundGroupSessionImpl extends RustOpaque implements RwLockInboundGroupSession {
  // Not to be used by end users
  RwLockInboundGroupSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockInboundGroupSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockInboundGroupSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockInboundGroupSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockInboundGroupSessionPtr,
  );
}

@sealed
class RwLockSessionImpl extends RustOpaque implements RwLockSession {
  // Not to be used by end users
  RwLockSessionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockSessionPtr,
  );
}

@sealed
class VodozemacSasImpl extends RustOpaque implements VodozemacSas {
  // Not to be used by end users
  VodozemacSasImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VodozemacSasImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_VodozemacSas,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_VodozemacSas,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_VodozemacSasPtr,
  );

  VodozemacEstablishedSas establishSasSecret({required String otherPublicKey}) =>
      RustLib.instance.api.crateBindingsVodozemacSasEstablishSasSecret(that: this, otherPublicKey: otherPublicKey);

  String publicKey() => RustLib.instance.api.crateBindingsVodozemacSasPublicKey(
        that: this,
      );
}

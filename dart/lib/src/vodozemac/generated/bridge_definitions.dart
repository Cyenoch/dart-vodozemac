// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:async';
import 'dart:convert';

import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:meta/meta.dart';
import 'package:uuid/uuid.dart';

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

abstract class VodozemacBindingsDart {
  int versionMethodVodozemacMegolmSessionConfig(
      {required VodozemacMegolmSessionConfig that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersionMethodVodozemacMegolmSessionConfigConstMeta;

  VodozemacMegolmSessionConfig version1StaticMethodVodozemacMegolmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersion1StaticMethodVodozemacMegolmSessionConfigConstMeta;

  VodozemacMegolmSessionConfig version2StaticMethodVodozemacMegolmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersion2StaticMethodVodozemacMegolmSessionConfigConstMeta;

  VodozemacMegolmSessionConfig defStaticMethodVodozemacMegolmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDefStaticMethodVodozemacMegolmSessionConfigConstMeta;

  Future<VodozemacGroupSession> newStaticMethodVodozemacGroupSession(
      {required VodozemacMegolmSessionConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodVodozemacGroupSessionConstMeta;

  String sessionIdMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionIdMethodVodozemacGroupSessionConstMeta;

  int messageIndexMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMessageIndexMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacMegolmSessionConfig> sessionConfigMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionConfigMethodVodozemacGroupSessionConstMeta;

  Future<String> encryptMethodVodozemacGroupSession(
      {required VodozemacGroupSession that,
      required String plaintext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kEncryptMethodVodozemacGroupSessionConstMeta;

  Future<String> sessionKeyMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionKeyMethodVodozemacGroupSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacGroupSession(
      {required VodozemacGroupSession that,
      required U8Array32 pickleKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPickleEncryptedMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacGroupSession>
      fromPickleEncryptedStaticMethodVodozemacGroupSession(
          {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPickleEncryptedStaticMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacGroupSession>
      fromOlmPickleEncryptedStaticMethodVodozemacGroupSession(
          {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromOlmPickleEncryptedStaticMethodVodozemacGroupSessionConstMeta;

  VodozemacInboundGroupSession toInboundMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToInboundMethodVodozemacGroupSessionConstMeta;

  VodozemacInboundGroupSession newStaticMethodVodozemacInboundGroupSession(
      {required String sessionKey,
      required VodozemacMegolmSessionConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodVodozemacInboundGroupSessionConstMeta;

  String sessionIdMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionIdMethodVodozemacInboundGroupSessionConstMeta;

  int firstKnownIndexMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFirstKnownIndexMethodVodozemacInboundGroupSessionConstMeta;

  Future<DecryptResult> decryptMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that,
      required String encrypted,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDecryptMethodVodozemacInboundGroupSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that,
      required U8Array32 pickleKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPickleEncryptedMethodVodozemacInboundGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession>
      fromPickleEncryptedStaticMethodVodozemacInboundGroupSession(
          {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPickleEncryptedStaticMethodVodozemacInboundGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession>
      fromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSession(
          {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSessionConstMeta;

  VodozemacInboundGroupSession importStaticMethodVodozemacInboundGroupSession(
      {required String sessionKey,
      required VodozemacMegolmSessionConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kImportStaticMethodVodozemacInboundGroupSessionConstMeta;

  String exportAtFirstKnownIndexMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExportAtFirstKnownIndexMethodVodozemacInboundGroupSessionConstMeta;

  String? exportAtMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExportAtMethodVodozemacInboundGroupSessionConstMeta;

  int versionMethodVodozemacOlmSessionConfig(
      {required VodozemacOlmSessionConfig that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersionMethodVodozemacOlmSessionConfigConstMeta;

  VodozemacOlmSessionConfig version1StaticMethodVodozemacOlmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersion1StaticMethodVodozemacOlmSessionConfigConstMeta;

  VodozemacOlmSessionConfig version2StaticMethodVodozemacOlmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersion2StaticMethodVodozemacOlmSessionConfigConstMeta;

  VodozemacOlmSessionConfig defStaticMethodVodozemacOlmSessionConfig(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDefStaticMethodVodozemacOlmSessionConfigConstMeta;

  VodozemacEd25519Signature fromSliceStaticMethodVodozemacEd25519Signature(
      {required U8Array64 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromSliceStaticMethodVodozemacEd25519SignatureConstMeta;

  VodozemacEd25519Signature fromBase64StaticMethodVodozemacEd25519Signature(
      {required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromBase64StaticMethodVodozemacEd25519SignatureConstMeta;

  String toBase64MethodVodozemacEd25519Signature(
      {required VodozemacEd25519Signature that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBase64MethodVodozemacEd25519SignatureConstMeta;

  U8Array64 toBytesMethodVodozemacEd25519Signature(
      {required VodozemacEd25519Signature that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBytesMethodVodozemacEd25519SignatureConstMeta;

  VodozemacEd25519PublicKey fromSliceStaticMethodVodozemacEd25519PublicKey(
      {required U8Array32 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromSliceStaticMethodVodozemacEd25519PublicKeyConstMeta;

  U8Array32 asBytesMethodVodozemacEd25519PublicKey(
      {required VodozemacEd25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAsBytesMethodVodozemacEd25519PublicKeyConstMeta;

  VodozemacEd25519PublicKey fromBase64StaticMethodVodozemacEd25519PublicKey(
      {required String base64Key, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromBase64StaticMethodVodozemacEd25519PublicKeyConstMeta;

  String toBase64MethodVodozemacEd25519PublicKey(
      {required VodozemacEd25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBase64MethodVodozemacEd25519PublicKeyConstMeta;

  /// Throws on mismatched signatures
  Future<void> verifyMethodVodozemacEd25519PublicKey(
      {required VodozemacEd25519PublicKey that,
      required String message,
      required VodozemacEd25519Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVerifyMethodVodozemacEd25519PublicKeyConstMeta;

  VodozemacCurve25519PublicKey
      fromSliceStaticMethodVodozemacCurve25519PublicKey(
          {required U8Array32 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromSliceStaticMethodVodozemacCurve25519PublicKeyConstMeta;

  U8Array32 asBytesMethodVodozemacCurve25519PublicKey(
      {required VodozemacCurve25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAsBytesMethodVodozemacCurve25519PublicKeyConstMeta;

  VodozemacCurve25519PublicKey
      fromBase64StaticMethodVodozemacCurve25519PublicKey(
          {required String base64Key, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromBase64StaticMethodVodozemacCurve25519PublicKeyConstMeta;

  String toBase64MethodVodozemacCurve25519PublicKey(
      {required VodozemacCurve25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBase64MethodVodozemacCurve25519PublicKeyConstMeta;

  int messageTypeMethodVodozemacOlmMessage(
      {required VodozemacOlmMessage that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMessageTypeMethodVodozemacOlmMessageConstMeta;

  String messageMethodVodozemacOlmMessage(
      {required VodozemacOlmMessage that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageMethodVodozemacOlmMessageConstMeta;

  VodozemacOlmMessage fromPartsStaticMethodVodozemacOlmMessage(
      {required int messageType, required String ciphertext, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPartsStaticMethodVodozemacOlmMessageConstMeta;

  String sessionIdMethodVodozemacSession(
      {required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIdMethodVodozemacSessionConstMeta;

  bool hasReceivedMessageMethodVodozemacSession(
      {required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kHasReceivedMessageMethodVodozemacSessionConstMeta;

  Future<VodozemacOlmMessage> encryptMethodVodozemacSession(
      {required VodozemacSession that,
      required String plaintext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptMethodVodozemacSessionConstMeta;

  Future<String> decryptMethodVodozemacSession(
      {required VodozemacSession that,
      required VodozemacOlmMessage message,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptMethodVodozemacSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacSession(
      {required VodozemacSession that,
      required U8Array32 pickleKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPickleEncryptedMethodVodozemacSessionConstMeta;

  Future<VodozemacSession> fromPickleEncryptedStaticMethodVodozemacSession(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPickleEncryptedStaticMethodVodozemacSessionConstMeta;

  Future<VodozemacSession> fromOlmPickleEncryptedStaticMethodVodozemacSession(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromOlmPickleEncryptedStaticMethodVodozemacSessionConstMeta;

  Future<VodozemacOlmSessionConfig> sessionConfigMethodVodozemacSession(
      {required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionConfigMethodVodozemacSessionConstMeta;

  Future<VodozemacAccount> newStaticMethodVodozemacAccount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodVodozemacAccountConstMeta;

  int maxNumberOfOneTimeKeysMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMaxNumberOfOneTimeKeysMethodVodozemacAccountConstMeta;

  Future<void> generateFallbackKeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGenerateFallbackKeyMethodVodozemacAccountConstMeta;

  bool forgetFallbackKeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kForgetFallbackKeyMethodVodozemacAccountConstMeta;

  Future<void> generateOneTimeKeysMethodVodozemacAccount(
      {required VodozemacAccount that, required int count, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGenerateOneTimeKeysMethodVodozemacAccountConstMeta;

  void markKeysAsPublishedMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMarkKeysAsPublishedMethodVodozemacAccountConstMeta;

  VodozemacEd25519PublicKey ed25519KeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519KeyMethodVodozemacAccountConstMeta;

  VodozemacCurve25519PublicKey curve25519KeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCurve25519KeyMethodVodozemacAccountConstMeta;

  VodozemacIdentityKeys identityKeysMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kIdentityKeysMethodVodozemacAccountConstMeta;

  List<VodozemacOneTimeKey> oneTimeKeysMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOneTimeKeysMethodVodozemacAccountConstMeta;

  List<VodozemacOneTimeKey> fallbackKeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFallbackKeyMethodVodozemacAccountConstMeta;

  Future<VodozemacEd25519Signature> signMethodVodozemacAccount(
      {required VodozemacAccount that, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodVodozemacAccountConstMeta;

  Future<VodozemacSession> createOutboundSessionMethodVodozemacAccount(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateOutboundSessionMethodVodozemacAccountConstMeta;

  Future<VodozemacOlmSessionCreationResult>
      createInboundSessionMethodVodozemacAccount(
          {required VodozemacAccount that,
          required VodozemacCurve25519PublicKey theirIdentityKey,
          required String preKeyMessageBase64,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateInboundSessionMethodVodozemacAccountConstMeta;

  Future<String> pickleEncryptedMethodVodozemacAccount(
      {required VodozemacAccount that,
      required U8Array32 pickleKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPickleEncryptedMethodVodozemacAccountConstMeta;

  Future<VodozemacAccount> fromPickleEncryptedStaticMethodVodozemacAccount(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPickleEncryptedStaticMethodVodozemacAccountConstMeta;

  Future<VodozemacAccount> fromOlmPickleEncryptedStaticMethodVodozemacAccount(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromOlmPickleEncryptedStaticMethodVodozemacAccountConstMeta;

  DropFnType get dropOpaqueCurve25519PublicKey;
  ShareFnType get shareOpaqueCurve25519PublicKey;
  OpaqueTypeFinalizer get Curve25519PublicKeyFinalizer;

  DropFnType get dropOpaqueEd25519PublicKey;
  ShareFnType get shareOpaqueEd25519PublicKey;
  OpaqueTypeFinalizer get Ed25519PublicKeyFinalizer;

  DropFnType get dropOpaqueEd25519Signature;
  ShareFnType get shareOpaqueEd25519Signature;
  OpaqueTypeFinalizer get Ed25519SignatureFinalizer;

  DropFnType get dropOpaqueMegolmSessionConfig;
  ShareFnType get shareOpaqueMegolmSessionConfig;
  OpaqueTypeFinalizer get MegolmSessionConfigFinalizer;

  DropFnType get dropOpaqueOlmMessage;
  ShareFnType get shareOpaqueOlmMessage;
  OpaqueTypeFinalizer get OlmMessageFinalizer;

  DropFnType get dropOpaqueOlmSessionConfig;
  ShareFnType get shareOpaqueOlmSessionConfig;
  OpaqueTypeFinalizer get OlmSessionConfigFinalizer;

  DropFnType get dropOpaqueRwLockGroupSession;
  ShareFnType get shareOpaqueRwLockGroupSession;
  OpaqueTypeFinalizer get RwLockGroupSessionFinalizer;

  DropFnType get dropOpaqueRwLockInboundGroupSession;
  ShareFnType get shareOpaqueRwLockInboundGroupSession;
  OpaqueTypeFinalizer get RwLockInboundGroupSessionFinalizer;

  DropFnType get dropOpaqueRwLockSession;
  ShareFnType get shareOpaqueRwLockSession;
  OpaqueTypeFinalizer get RwLockSessionFinalizer;

  DropFnType get dropOpaqueStdSyncRwLockAccount;
  ShareFnType get shareOpaqueStdSyncRwLockAccount;
  OpaqueTypeFinalizer get StdSyncRwLockAccountFinalizer;
}

@sealed
class Curve25519PublicKey extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  Curve25519PublicKey.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueCurve25519PublicKey;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueCurve25519PublicKey;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.Curve25519PublicKeyFinalizer;
}

@sealed
class Ed25519PublicKey extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  Ed25519PublicKey.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueEd25519PublicKey;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueEd25519PublicKey;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.Ed25519PublicKeyFinalizer;
}

@sealed
class Ed25519Signature extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  Ed25519Signature.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueEd25519Signature;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueEd25519Signature;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.Ed25519SignatureFinalizer;
}

@sealed
class MegolmSessionConfig extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  MegolmSessionConfig.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMegolmSessionConfig;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMegolmSessionConfig;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.MegolmSessionConfigFinalizer;
}

@sealed
class OlmMessage extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  OlmMessage.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueOlmMessage;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueOlmMessage;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.OlmMessageFinalizer;
}

@sealed
class OlmSessionConfig extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  OlmSessionConfig.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueOlmSessionConfig;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueOlmSessionConfig;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.OlmSessionConfigFinalizer;
}

@sealed
class RwLockGroupSession extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  RwLockGroupSession.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockGroupSession;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockGroupSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RwLockGroupSessionFinalizer;
}

@sealed
class RwLockInboundGroupSession extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  RwLockInboundGroupSession.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockInboundGroupSession;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockInboundGroupSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.RwLockInboundGroupSessionFinalizer;
}

@sealed
class RwLockSession extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  RwLockSession.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockSession;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RwLockSessionFinalizer;
}

@sealed
class StdSyncRwLockAccount extends FrbOpaque {
  final VodozemacBindingsDart bridge;
  StdSyncRwLockAccount.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueStdSyncRwLockAccount;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueStdSyncRwLockAccount;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.StdSyncRwLockAccountFinalizer;
}

class DecryptResult {
  final String field0;
  final int field1;

  const DecryptResult({
    required this.field0,
    required this.field1,
  });
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;
  U8Array64(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array64.unchecked(Uint8List inner) : super(inner);
  U8Array64.init() : super(Uint8List(arraySize));
}

class VodozemacAccount {
  final VodozemacBindingsDart bridge;
  final StdSyncRwLockAccount account;

  const VodozemacAccount({
    required this.bridge,
    required this.account,
  });

  static Future<VodozemacAccount> newVodozemacAccount(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.newStaticMethodVodozemacAccount(hint: hint);

  int maxNumberOfOneTimeKeys({dynamic hint}) =>
      bridge.maxNumberOfOneTimeKeysMethodVodozemacAccount(
        that: this,
      );

  Future<void> generateFallbackKey({dynamic hint}) =>
      bridge.generateFallbackKeyMethodVodozemacAccount(
        that: this,
      );

  bool forgetFallbackKey({dynamic hint}) =>
      bridge.forgetFallbackKeyMethodVodozemacAccount(
        that: this,
      );

  Future<void> generateOneTimeKeys({required int count, dynamic hint}) =>
      bridge.generateOneTimeKeysMethodVodozemacAccount(
        that: this,
        count: count,
      );

  void markKeysAsPublished({dynamic hint}) =>
      bridge.markKeysAsPublishedMethodVodozemacAccount(
        that: this,
      );

  VodozemacEd25519PublicKey ed25519Key({dynamic hint}) =>
      bridge.ed25519KeyMethodVodozemacAccount(
        that: this,
      );

  VodozemacCurve25519PublicKey curve25519Key({dynamic hint}) =>
      bridge.curve25519KeyMethodVodozemacAccount(
        that: this,
      );

  VodozemacIdentityKeys identityKeys({dynamic hint}) =>
      bridge.identityKeysMethodVodozemacAccount(
        that: this,
      );

  List<VodozemacOneTimeKey> oneTimeKeys({dynamic hint}) =>
      bridge.oneTimeKeysMethodVodozemacAccount(
        that: this,
      );

  List<VodozemacOneTimeKey> fallbackKey({dynamic hint}) =>
      bridge.fallbackKeyMethodVodozemacAccount(
        that: this,
      );

  Future<VodozemacEd25519Signature> sign(
          {required String message, dynamic hint}) =>
      bridge.signMethodVodozemacAccount(
        that: this,
        message: message,
      );

  Future<VodozemacSession> createOutboundSession(
          {required VodozemacOlmSessionConfig config,
          required VodozemacCurve25519PublicKey identityKey,
          required VodozemacCurve25519PublicKey oneTimeKey,
          dynamic hint}) =>
      bridge.createOutboundSessionMethodVodozemacAccount(
        that: this,
        config: config,
        identityKey: identityKey,
        oneTimeKey: oneTimeKey,
      );

  Future<VodozemacOlmSessionCreationResult> createInboundSession(
          {required VodozemacCurve25519PublicKey theirIdentityKey,
          required String preKeyMessageBase64,
          dynamic hint}) =>
      bridge.createInboundSessionMethodVodozemacAccount(
        that: this,
        theirIdentityKey: theirIdentityKey,
        preKeyMessageBase64: preKeyMessageBase64,
      );

  Future<String> pickleEncrypted(
          {required U8Array32 pickleKey, dynamic hint}) =>
      bridge.pickleEncryptedMethodVodozemacAccount(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacAccount> fromPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required U8Array32 pickleKey,
          dynamic hint}) =>
      bridge.fromPickleEncryptedStaticMethodVodozemacAccount(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacAccount> fromOlmPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required Uint8List pickleKey,
          dynamic hint}) =>
      bridge.fromOlmPickleEncryptedStaticMethodVodozemacAccount(
          pickle: pickle, pickleKey: pickleKey, hint: hint);
}

class VodozemacCurve25519PublicKey {
  final VodozemacBindingsDart bridge;
  final Curve25519PublicKey key;

  const VodozemacCurve25519PublicKey({
    required this.bridge,
    required this.key,
  });

  static VodozemacCurve25519PublicKey fromSlice(
          {required VodozemacBindingsDart bridge,
          required U8Array32 bytes,
          dynamic hint}) =>
      bridge.fromSliceStaticMethodVodozemacCurve25519PublicKey(
          bytes: bytes, hint: hint);

  U8Array32 asBytes({dynamic hint}) =>
      bridge.asBytesMethodVodozemacCurve25519PublicKey(
        that: this,
      );

  static VodozemacCurve25519PublicKey fromBase64(
          {required VodozemacBindingsDart bridge,
          required String base64Key,
          dynamic hint}) =>
      bridge.fromBase64StaticMethodVodozemacCurve25519PublicKey(
          base64Key: base64Key, hint: hint);

  String toBase64({dynamic hint}) =>
      bridge.toBase64MethodVodozemacCurve25519PublicKey(
        that: this,
      );
}

class VodozemacEd25519PublicKey {
  final VodozemacBindingsDart bridge;
  final Ed25519PublicKey key;

  const VodozemacEd25519PublicKey({
    required this.bridge,
    required this.key,
  });

  static VodozemacEd25519PublicKey fromSlice(
          {required VodozemacBindingsDart bridge,
          required U8Array32 bytes,
          dynamic hint}) =>
      bridge.fromSliceStaticMethodVodozemacEd25519PublicKey(
          bytes: bytes, hint: hint);

  U8Array32 asBytes({dynamic hint}) =>
      bridge.asBytesMethodVodozemacEd25519PublicKey(
        that: this,
      );

  static VodozemacEd25519PublicKey fromBase64(
          {required VodozemacBindingsDart bridge,
          required String base64Key,
          dynamic hint}) =>
      bridge.fromBase64StaticMethodVodozemacEd25519PublicKey(
          base64Key: base64Key, hint: hint);

  String toBase64({dynamic hint}) =>
      bridge.toBase64MethodVodozemacEd25519PublicKey(
        that: this,
      );

  /// Throws on mismatched signatures
  Future<void> verify(
          {required String message,
          required VodozemacEd25519Signature signature,
          dynamic hint}) =>
      bridge.verifyMethodVodozemacEd25519PublicKey(
        that: this,
        message: message,
        signature: signature,
      );
}

class VodozemacEd25519Signature {
  final VodozemacBindingsDart bridge;
  final Ed25519Signature signature;

  const VodozemacEd25519Signature({
    required this.bridge,
    required this.signature,
  });

  static VodozemacEd25519Signature fromSlice(
          {required VodozemacBindingsDart bridge,
          required U8Array64 bytes,
          dynamic hint}) =>
      bridge.fromSliceStaticMethodVodozemacEd25519Signature(
          bytes: bytes, hint: hint);

  static VodozemacEd25519Signature fromBase64(
          {required VodozemacBindingsDart bridge,
          required String signature,
          dynamic hint}) =>
      bridge.fromBase64StaticMethodVodozemacEd25519Signature(
          signature: signature, hint: hint);

  String toBase64({dynamic hint}) =>
      bridge.toBase64MethodVodozemacEd25519Signature(
        that: this,
      );

  U8Array64 toBytes({dynamic hint}) =>
      bridge.toBytesMethodVodozemacEd25519Signature(
        that: this,
      );
}

class VodozemacGroupSession {
  final VodozemacBindingsDart bridge;
  final RwLockGroupSession session;

  const VodozemacGroupSession({
    required this.bridge,
    required this.session,
  });

  static Future<VodozemacGroupSession> newVodozemacGroupSession(
          {required VodozemacBindingsDart bridge,
          required VodozemacMegolmSessionConfig config,
          dynamic hint}) =>
      bridge.newStaticMethodVodozemacGroupSession(config: config, hint: hint);

  String sessionId({dynamic hint}) =>
      bridge.sessionIdMethodVodozemacGroupSession(
        that: this,
      );

  int messageIndex({dynamic hint}) =>
      bridge.messageIndexMethodVodozemacGroupSession(
        that: this,
      );

  Future<VodozemacMegolmSessionConfig> sessionConfig({dynamic hint}) =>
      bridge.sessionConfigMethodVodozemacGroupSession(
        that: this,
      );

  Future<String> encrypt({required String plaintext, dynamic hint}) =>
      bridge.encryptMethodVodozemacGroupSession(
        that: this,
        plaintext: plaintext,
      );

  Future<String> sessionKey({dynamic hint}) =>
      bridge.sessionKeyMethodVodozemacGroupSession(
        that: this,
      );

  Future<String> pickleEncrypted(
          {required U8Array32 pickleKey, dynamic hint}) =>
      bridge.pickleEncryptedMethodVodozemacGroupSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacGroupSession> fromPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required U8Array32 pickleKey,
          dynamic hint}) =>
      bridge.fromPickleEncryptedStaticMethodVodozemacGroupSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacGroupSession> fromOlmPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required Uint8List pickleKey,
          dynamic hint}) =>
      bridge.fromOlmPickleEncryptedStaticMethodVodozemacGroupSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  VodozemacInboundGroupSession toInbound({dynamic hint}) =>
      bridge.toInboundMethodVodozemacGroupSession(
        that: this,
      );
}

class VodozemacIdentityKeys {
  final VodozemacEd25519PublicKey ed25519;
  final VodozemacCurve25519PublicKey curve25519;

  const VodozemacIdentityKeys({
    required this.ed25519,
    required this.curve25519,
  });
}

class VodozemacInboundGroupSession {
  final VodozemacBindingsDart bridge;
  final RwLockInboundGroupSession session;

  const VodozemacInboundGroupSession({
    required this.bridge,
    required this.session,
  });

  static VodozemacInboundGroupSession newVodozemacInboundGroupSession(
          {required VodozemacBindingsDart bridge,
          required String sessionKey,
          required VodozemacMegolmSessionConfig config,
          dynamic hint}) =>
      bridge.newStaticMethodVodozemacInboundGroupSession(
          sessionKey: sessionKey, config: config, hint: hint);

  String sessionId({dynamic hint}) =>
      bridge.sessionIdMethodVodozemacInboundGroupSession(
        that: this,
      );

  int firstKnownIndex({dynamic hint}) =>
      bridge.firstKnownIndexMethodVodozemacInboundGroupSession(
        that: this,
      );

  Future<DecryptResult> decrypt({required String encrypted, dynamic hint}) =>
      bridge.decryptMethodVodozemacInboundGroupSession(
        that: this,
        encrypted: encrypted,
      );

  Future<String> pickleEncrypted(
          {required U8Array32 pickleKey, dynamic hint}) =>
      bridge.pickleEncryptedMethodVodozemacInboundGroupSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacInboundGroupSession> fromPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required U8Array32 pickleKey,
          dynamic hint}) =>
      bridge.fromPickleEncryptedStaticMethodVodozemacInboundGroupSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacInboundGroupSession> fromOlmPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required Uint8List pickleKey,
          dynamic hint}) =>
      bridge.fromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static VodozemacInboundGroupSession import(
          {required VodozemacBindingsDart bridge,
          required String sessionKey,
          required VodozemacMegolmSessionConfig config,
          dynamic hint}) =>
      bridge.importStaticMethodVodozemacInboundGroupSession(
          sessionKey: sessionKey, config: config, hint: hint);

  String exportAtFirstKnownIndex({dynamic hint}) =>
      bridge.exportAtFirstKnownIndexMethodVodozemacInboundGroupSession(
        that: this,
      );

  String? exportAt({required int index, dynamic hint}) =>
      bridge.exportAtMethodVodozemacInboundGroupSession(
        that: this,
        index: index,
      );
}

class VodozemacMegolmSessionConfig {
  final VodozemacBindingsDart bridge;
  final MegolmSessionConfig config;

  const VodozemacMegolmSessionConfig({
    required this.bridge,
    required this.config,
  });

  int version({dynamic hint}) =>
      bridge.versionMethodVodozemacMegolmSessionConfig(
        that: this,
      );

  static VodozemacMegolmSessionConfig version1(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.version1StaticMethodVodozemacMegolmSessionConfig(hint: hint);

  static VodozemacMegolmSessionConfig version2(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.version2StaticMethodVodozemacMegolmSessionConfig(hint: hint);

  static VodozemacMegolmSessionConfig def(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.defStaticMethodVodozemacMegolmSessionConfig(hint: hint);
}

class VodozemacOlmMessage {
  final VodozemacBindingsDart bridge;
  final OlmMessage msg;

  const VodozemacOlmMessage({
    required this.bridge,
    required this.msg,
  });

  int messageType({dynamic hint}) =>
      bridge.messageTypeMethodVodozemacOlmMessage(
        that: this,
      );

  String message({dynamic hint}) => bridge.messageMethodVodozemacOlmMessage(
        that: this,
      );

  static VodozemacOlmMessage fromParts(
          {required VodozemacBindingsDart bridge,
          required int messageType,
          required String ciphertext,
          dynamic hint}) =>
      bridge.fromPartsStaticMethodVodozemacOlmMessage(
          messageType: messageType, ciphertext: ciphertext, hint: hint);
}

class VodozemacOlmSessionConfig {
  final VodozemacBindingsDart bridge;
  final OlmSessionConfig config;

  const VodozemacOlmSessionConfig({
    required this.bridge,
    required this.config,
  });

  int version({dynamic hint}) => bridge.versionMethodVodozemacOlmSessionConfig(
        that: this,
      );

  static VodozemacOlmSessionConfig version1(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.version1StaticMethodVodozemacOlmSessionConfig(hint: hint);

  static VodozemacOlmSessionConfig version2(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.version2StaticMethodVodozemacOlmSessionConfig(hint: hint);

  static VodozemacOlmSessionConfig def(
          {required VodozemacBindingsDart bridge, dynamic hint}) =>
      bridge.defStaticMethodVodozemacOlmSessionConfig(hint: hint);
}

class VodozemacOlmSessionCreationResult {
  final VodozemacSession session;
  final String plaintext;

  const VodozemacOlmSessionCreationResult({
    required this.session,
    required this.plaintext,
  });
}

class VodozemacOneTimeKey {
  final String keyid;
  final VodozemacCurve25519PublicKey key;

  const VodozemacOneTimeKey({
    required this.keyid,
    required this.key,
  });
}

class VodozemacSession {
  final VodozemacBindingsDart bridge;
  final RwLockSession session;

  const VodozemacSession({
    required this.bridge,
    required this.session,
  });

  String sessionId({dynamic hint}) => bridge.sessionIdMethodVodozemacSession(
        that: this,
      );

  bool hasReceivedMessage({dynamic hint}) =>
      bridge.hasReceivedMessageMethodVodozemacSession(
        that: this,
      );

  Future<VodozemacOlmMessage> encrypt(
          {required String plaintext, dynamic hint}) =>
      bridge.encryptMethodVodozemacSession(
        that: this,
        plaintext: plaintext,
      );

  Future<String> decrypt(
          {required VodozemacOlmMessage message, dynamic hint}) =>
      bridge.decryptMethodVodozemacSession(
        that: this,
        message: message,
      );

  Future<String> pickleEncrypted(
          {required U8Array32 pickleKey, dynamic hint}) =>
      bridge.pickleEncryptedMethodVodozemacSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacSession> fromPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required U8Array32 pickleKey,
          dynamic hint}) =>
      bridge.fromPickleEncryptedStaticMethodVodozemacSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacSession> fromOlmPickleEncrypted(
          {required VodozemacBindingsDart bridge,
          required String pickle,
          required Uint8List pickleKey,
          dynamic hint}) =>
      bridge.fromOlmPickleEncryptedStaticMethodVodozemacSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  Future<VodozemacOlmSessionConfig> sessionConfig({dynamic hint}) =>
      bridge.sessionConfigMethodVodozemacSession(
        that: this,
      );
}

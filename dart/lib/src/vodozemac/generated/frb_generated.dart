// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1962951366;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'vodozemac_bindings_dart',
    ioDirectory: '../rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<VodozemacOlmSessionCreationResult> crateApiVodozemacAccountCreateInboundSession(
      {required VodozemacAccount that,
      required VodozemacCurve25519PublicKey theirIdentityKey,
      required String preKeyMessageBase64});

  Future<VodozemacSession> crateApiVodozemacAccountCreateOutboundSession(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey});

  VodozemacCurve25519PublicKey crateApiVodozemacAccountCurve25519Key({required VodozemacAccount that});

  VodozemacEd25519PublicKey crateApiVodozemacAccountEd25519Key({required VodozemacAccount that});

  List<VodozemacOneTimeKey> crateApiVodozemacAccountFallbackKey({required VodozemacAccount that});

  bool crateApiVodozemacAccountForgetFallbackKey({required VodozemacAccount that});

  Future<VodozemacAccount> crateApiVodozemacAccountFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  Future<VodozemacAccount> crateApiVodozemacAccountFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  Future<String?> crateApiVodozemacAccountGenerateFallbackKey({required VodozemacAccount that});

  Future<void> crateApiVodozemacAccountGenerateOneTimeKeys({required VodozemacAccount that, required BigInt count});

  VodozemacIdentityKeys crateApiVodozemacAccountIdentityKeys({required VodozemacAccount that});

  void crateApiVodozemacAccountMarkKeysAsPublished({required VodozemacAccount that});

  BigInt crateApiVodozemacAccountMaxNumberOfOneTimeKeys({required VodozemacAccount that});

  VodozemacAccount crateApiVodozemacAccountNew();

  List<VodozemacOneTimeKey> crateApiVodozemacAccountOneTimeKeys({required VodozemacAccount that});

  Future<String> crateApiVodozemacAccountPickleEncrypted(
      {required VodozemacAccount that, required U8Array32 pickleKey});

  Future<VodozemacEd25519Signature> crateApiVodozemacAccountSign(
      {required VodozemacAccount that, required String message});

  U8Array32 crateApiVodozemacCurve25519PublicKeyAsBytes({required VodozemacCurve25519PublicKey that});

  VodozemacCurve25519PublicKey crateApiVodozemacCurve25519PublicKeyFromBase64({required String base64Key});

  VodozemacCurve25519PublicKey crateApiVodozemacCurve25519PublicKeyFromSlice({required U8Array32 bytes});

  String crateApiVodozemacCurve25519PublicKeyToBase64({required VodozemacCurve25519PublicKey that});

  U8Array32 crateApiVodozemacEd25519PublicKeyAsBytes({required VodozemacEd25519PublicKey that});

  VodozemacEd25519PublicKey crateApiVodozemacEd25519PublicKeyFromBase64({required String base64Key});

  VodozemacEd25519PublicKey crateApiVodozemacEd25519PublicKeyFromSlice({required U8Array32 bytes});

  String crateApiVodozemacEd25519PublicKeyToBase64({required VodozemacEd25519PublicKey that});

  Future<void> crateApiVodozemacEd25519PublicKeyVerify(
      {required VodozemacEd25519PublicKey that, required String message, required VodozemacEd25519Signature signature});

  VodozemacEd25519Signature crateApiVodozemacEd25519SignatureFromBase64({required String signature});

  VodozemacEd25519Signature crateApiVodozemacEd25519SignatureFromSlice({required U8Array64 bytes});

  String crateApiVodozemacEd25519SignatureToBase64({required VodozemacEd25519Signature that});

  U8Array64 crateApiVodozemacEd25519SignatureToBytes({required VodozemacEd25519Signature that});

  Future<String> crateApiVodozemacGroupSessionEncrypt({required VodozemacGroupSession that, required String plaintext});

  Future<VodozemacGroupSession> crateApiVodozemacGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  Future<VodozemacGroupSession> crateApiVodozemacGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  int crateApiVodozemacGroupSessionMessageIndex({required VodozemacGroupSession that});

  VodozemacGroupSession crateApiVodozemacGroupSessionNew({required VodozemacMegolmSessionConfig config});

  Future<String> crateApiVodozemacGroupSessionPickleEncrypted(
      {required VodozemacGroupSession that, required U8Array32 pickleKey});

  Future<VodozemacMegolmSessionConfig> crateApiVodozemacGroupSessionSessionConfig(
      {required VodozemacGroupSession that});

  String crateApiVodozemacGroupSessionSessionId({required VodozemacGroupSession that});

  Future<String> crateApiVodozemacGroupSessionSessionKey({required VodozemacGroupSession that});

  VodozemacInboundGroupSession crateApiVodozemacGroupSessionToInbound({required VodozemacGroupSession that});

  Future<DecryptResult> crateApiVodozemacInboundGroupSessionDecrypt(
      {required VodozemacInboundGroupSession that, required String encrypted});

  String? crateApiVodozemacInboundGroupSessionExportAt(
      {required VodozemacInboundGroupSession that, required int index});

  String crateApiVodozemacInboundGroupSessionExportAtFirstKnownIndex({required VodozemacInboundGroupSession that});

  int crateApiVodozemacInboundGroupSessionFirstKnownIndex({required VodozemacInboundGroupSession that});

  Future<VodozemacInboundGroupSession> crateApiVodozemacInboundGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  Future<VodozemacInboundGroupSession> crateApiVodozemacInboundGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  VodozemacInboundGroupSession crateApiVodozemacInboundGroupSessionImport(
      {required String sessionKey, required VodozemacMegolmSessionConfig config});

  VodozemacInboundGroupSession crateApiVodozemacInboundGroupSessionNew(
      {required String sessionKey, required VodozemacMegolmSessionConfig config});

  Future<String> crateApiVodozemacInboundGroupSessionPickleEncrypted(
      {required VodozemacInboundGroupSession that, required U8Array32 pickleKey});

  String crateApiVodozemacInboundGroupSessionSessionId({required VodozemacInboundGroupSession that});

  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigDef();

  int crateApiVodozemacMegolmSessionConfigVersion({required VodozemacMegolmSessionConfig that});

  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigVersion1();

  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigVersion2();

  VodozemacOlmMessage crateApiVodozemacOlmMessageFromParts(
      {required BigInt messageType, required List<int> ciphertext});

  String crateApiVodozemacOlmMessageMessage({required VodozemacOlmMessage that});

  BigInt crateApiVodozemacOlmMessageMessageType({required VodozemacOlmMessage that});

  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigDef();

  int crateApiVodozemacOlmSessionConfigVersion({required VodozemacOlmSessionConfig that});

  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigVersion1();

  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigVersion2();

  Future<String> crateApiVodozemacSessionDecrypt(
      {required VodozemacSession that, required VodozemacOlmMessage message});

  Future<VodozemacOlmMessage> crateApiVodozemacSessionEncrypt(
      {required VodozemacSession that, required String plaintext});

  Future<VodozemacSession> crateApiVodozemacSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey});

  Future<VodozemacSession> crateApiVodozemacSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey});

  bool crateApiVodozemacSessionHasReceivedMessage({required VodozemacSession that});

  Future<String> crateApiVodozemacSessionPickleEncrypted(
      {required VodozemacSession that, required U8Array32 pickleKey});

  Future<VodozemacOlmSessionConfig> crateApiVodozemacSessionSessionConfig({required VodozemacSession that});

  String crateApiVodozemacSessionSessionId({required VodozemacSession that});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Curve25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Curve25519PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Curve25519PublicKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519PublicKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ed25519PublicKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519Signature;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519Signature;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Ed25519SignaturePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MegolmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MegolmSessionConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MegolmSessionConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmMessage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmMessage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OlmMessagePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmSessionConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OlmSessionConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockGroupSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockGroupSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockInboundGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockInboundGroupSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockInboundGroupSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockSessionPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockAccount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockAccount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RwLockAccountPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<VodozemacOlmSessionCreationResult> crateApiVodozemacAccountCreateInboundSession(
      {required VodozemacAccount that,
      required VodozemacCurve25519PublicKey theirIdentityKey,
      required String preKeyMessageBase64}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(theirIdentityKey);
        var arg2 = cst_encode_String(preKeyMessageBase64);
        return wire.wire__crate__api__vodozemac_account_create_inbound_session(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_creation_result,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacAccountCreateInboundSessionConstMeta,
      argValues: [that, theirIdentityKey, preKeyMessageBase64],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountCreateInboundSessionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_create_inbound_session",
        argNames: ["that", "theirIdentityKey", "preKeyMessageBase64"],
      );

  @override
  Future<VodozemacSession> crateApiVodozemacAccountCreateOutboundSession(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_olm_session_config(config);
        var arg2 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(identityKey);
        var arg3 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(oneTimeKey);
        return wire.wire__crate__api__vodozemac_account_create_outbound_session(port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountCreateOutboundSessionConstMeta,
      argValues: [that, config, identityKey, oneTimeKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountCreateOutboundSessionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_create_outbound_session",
        argNames: ["that", "config", "identityKey", "oneTimeKey"],
      );

  @override
  VodozemacCurve25519PublicKey crateApiVodozemacAccountCurve25519Key({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_curve25519_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountCurve25519KeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountCurve25519KeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_curve25519_key",
        argNames: ["that"],
      );

  @override
  VodozemacEd25519PublicKey crateApiVodozemacAccountEd25519Key({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_ed25519_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountEd25519KeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountEd25519KeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_ed25519_key",
        argNames: ["that"],
      );

  @override
  List<VodozemacOneTimeKey> crateApiVodozemacAccountFallbackKey({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_fallback_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_vodozemac_one_time_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_fallback_key",
        argNames: ["that"],
      );

  @override
  bool crateApiVodozemacAccountForgetFallbackKey({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_forget_fallback_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountForgetFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountForgetFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_forget_fallback_key",
        argNames: ["that"],
      );

  @override
  Future<VodozemacAccount> crateApiVodozemacAccountFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__api__vodozemac_account_from_olm_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacAccountFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  Future<VodozemacAccount> crateApiVodozemacAccountFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_account_from_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacAccountFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  Future<String?> crateApiVodozemacAccountGenerateFallbackKey({required VodozemacAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_generate_fallback_key(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountGenerateFallbackKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountGenerateFallbackKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_generate_fallback_key",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiVodozemacAccountGenerateOneTimeKeys({required VodozemacAccount that, required BigInt count}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_usize(count);
        return wire.wire__crate__api__vodozemac_account_generate_one_time_keys(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountGenerateOneTimeKeysConstMeta,
      argValues: [that, count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountGenerateOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_generate_one_time_keys",
        argNames: ["that", "count"],
      );

  @override
  VodozemacIdentityKeys crateApiVodozemacAccountIdentityKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_identity_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_identity_keys,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountIdentityKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountIdentityKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_identity_keys",
        argNames: ["that"],
      );

  @override
  void crateApiVodozemacAccountMarkKeysAsPublished({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_mark_keys_as_published(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountMarkKeysAsPublishedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountMarkKeysAsPublishedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_mark_keys_as_published",
        argNames: ["that"],
      );

  @override
  BigInt crateApiVodozemacAccountMaxNumberOfOneTimeKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_max_number_of_one_time_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountMaxNumberOfOneTimeKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountMaxNumberOfOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_max_number_of_one_time_keys",
        argNames: ["that"],
      );

  @override
  VodozemacAccount crateApiVodozemacAccountNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_account_new();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_account,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_new",
        argNames: [],
      );

  @override
  List<VodozemacOneTimeKey> crateApiVodozemacAccountOneTimeKeys({required VodozemacAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        return wire.wire__crate__api__vodozemac_account_one_time_keys(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_vodozemac_one_time_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountOneTimeKeysConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountOneTimeKeysConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_one_time_keys",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiVodozemacAccountPickleEncrypted(
      {required VodozemacAccount that, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_account_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  Future<VodozemacEd25519Signature> crateApiVodozemacAccountSign(
      {required VodozemacAccount that, required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_account(that);
        var arg1 = cst_encode_String(message);
        return wire.wire__crate__api__vodozemac_account_sign(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacAccountSignConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacAccountSignConstMeta => const TaskConstMeta(
        debugName: "vodozemac_account_sign",
        argNames: ["that", "message"],
      );

  @override
  U8Array32 crateApiVodozemacCurve25519PublicKeyAsBytes({required VodozemacCurve25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(that);
        return wire.wire__crate__api__vodozemac_curve_25519_public_key_as_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacCurve25519PublicKeyAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacCurve25519PublicKeyAsBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_as_bytes",
        argNames: ["that"],
      );

  @override
  VodozemacCurve25519PublicKey crateApiVodozemacCurve25519PublicKeyFromBase64({required String base64Key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(base64Key);
        return wire.wire__crate__api__vodozemac_curve_25519_public_key_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacCurve25519PublicKeyFromBase64ConstMeta,
      argValues: [base64Key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacCurve25519PublicKeyFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_from_base64",
        argNames: ["base64Key"],
      );

  @override
  VodozemacCurve25519PublicKey crateApiVodozemacCurve25519PublicKeyFromSlice({required U8Array32 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(bytes);
        return wire.wire__crate__api__vodozemac_curve_25519_public_key_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_curve_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacCurve25519PublicKeyFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacCurve25519PublicKeyFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateApiVodozemacCurve25519PublicKeyToBase64({required VodozemacCurve25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_curve_25519_public_key(that);
        return wire.wire__crate__api__vodozemac_curve_25519_public_key_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacCurve25519PublicKeyToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacCurve25519PublicKeyToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_curve_25519_public_key_to_base64",
        argNames: ["that"],
      );

  @override
  U8Array32 crateApiVodozemacEd25519PublicKeyAsBytes({required VodozemacEd25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        return wire.wire__crate__api__vodozemac_ed_25519_public_key_as_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacEd25519PublicKeyAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519PublicKeyAsBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_as_bytes",
        argNames: ["that"],
      );

  @override
  VodozemacEd25519PublicKey crateApiVodozemacEd25519PublicKeyFromBase64({required String base64Key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(base64Key);
        return wire.wire__crate__api__vodozemac_ed_25519_public_key_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacEd25519PublicKeyFromBase64ConstMeta,
      argValues: [base64Key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519PublicKeyFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_from_base64",
        argNames: ["base64Key"],
      );

  @override
  VodozemacEd25519PublicKey crateApiVodozemacEd25519PublicKeyFromSlice({required U8Array32 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_32(bytes);
        return wire.wire__crate__api__vodozemac_ed_25519_public_key_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_public_key,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacEd25519PublicKeyFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519PublicKeyFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateApiVodozemacEd25519PublicKeyToBase64({required VodozemacEd25519PublicKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        return wire.wire__crate__api__vodozemac_ed_25519_public_key_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacEd25519PublicKeyToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519PublicKeyToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_to_base64",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiVodozemacEd25519PublicKeyVerify(
      {required VodozemacEd25519PublicKey that,
      required String message,
      required VodozemacEd25519Signature signature}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_public_key(that);
        var arg1 = cst_encode_String(message);
        var arg2 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(signature);
        return wire.wire__crate__api__vodozemac_ed_25519_public_key_verify(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacEd25519PublicKeyVerifyConstMeta,
      argValues: [that, message, signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519PublicKeyVerifyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_public_key_verify",
        argNames: ["that", "message", "signature"],
      );

  @override
  VodozemacEd25519Signature crateApiVodozemacEd25519SignatureFromBase64({required String signature}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(signature);
        return wire.wire__crate__api__vodozemac_ed_25519_signature_from_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacEd25519SignatureFromBase64ConstMeta,
      argValues: [signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519SignatureFromBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_from_base64",
        argNames: ["signature"],
      );

  @override
  VodozemacEd25519Signature crateApiVodozemacEd25519SignatureFromSlice({required U8Array64 bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8_array_64(bytes);
        return wire.wire__crate__api__vodozemac_ed_25519_signature_from_slice(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_ed_25519_signature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacEd25519SignatureFromSliceConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519SignatureFromSliceConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_from_slice",
        argNames: ["bytes"],
      );

  @override
  String crateApiVodozemacEd25519SignatureToBase64({required VodozemacEd25519Signature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(that);
        return wire.wire__crate__api__vodozemac_ed_25519_signature_to_base64(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacEd25519SignatureToBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519SignatureToBase64ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_to_base64",
        argNames: ["that"],
      );

  @override
  U8Array64 crateApiVodozemacEd25519SignatureToBytes({required VodozemacEd25519Signature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_ed_25519_signature(that);
        return wire.wire__crate__api__vodozemac_ed_25519_signature_to_bytes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8_array_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacEd25519SignatureToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacEd25519SignatureToBytesConstMeta => const TaskConstMeta(
        debugName: "vodozemac_ed_25519_signature_to_bytes",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiVodozemacGroupSessionEncrypt(
      {required VodozemacGroupSession that, required String plaintext}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire__crate__api__vodozemac_group_session_encrypt(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionEncryptConstMeta,
      argValues: [that, plaintext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionEncryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_encrypt",
        argNames: ["that", "plaintext"],
      );

  @override
  Future<VodozemacGroupSession> crateApiVodozemacGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__api__vodozemac_group_session_from_olm_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacGroupSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  Future<VodozemacGroupSession> crateApiVodozemacGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_group_session_from_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacGroupSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  int crateApiVodozemacGroupSessionMessageIndex({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__api__vodozemac_group_session_message_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionMessageIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionMessageIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_message_index",
        argNames: ["that"],
      );

  @override
  VodozemacGroupSession crateApiVodozemacGroupSessionNew({required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__api__vodozemac_group_session_new(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_group_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionNewConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_new",
        argNames: ["config"],
      );

  @override
  Future<String> crateApiVodozemacGroupSessionPickleEncrypted(
      {required VodozemacGroupSession that, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_group_session_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  Future<VodozemacMegolmSessionConfig> crateApiVodozemacGroupSessionSessionConfig(
      {required VodozemacGroupSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__api__vodozemac_group_session_session_config(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionSessionConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionSessionConfigConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_config",
        argNames: ["that"],
      );

  @override
  String crateApiVodozemacGroupSessionSessionId({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__api__vodozemac_group_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_id",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiVodozemacGroupSessionSessionKey({required VodozemacGroupSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__api__vodozemac_group_session_session_key(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionSessionKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionSessionKeyConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_session_key",
        argNames: ["that"],
      );

  @override
  VodozemacInboundGroupSession crateApiVodozemacGroupSessionToInbound({required VodozemacGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_group_session(that);
        return wire.wire__crate__api__vodozemac_group_session_to_inbound(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacGroupSessionToInboundConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacGroupSessionToInboundConstMeta => const TaskConstMeta(
        debugName: "vodozemac_group_session_to_inbound",
        argNames: ["that"],
      );

  @override
  Future<DecryptResult> crateApiVodozemacInboundGroupSessionDecrypt(
      {required VodozemacInboundGroupSession that, required String encrypted}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_String(encrypted);
        return wire.wire__crate__api__vodozemac_inbound_group_session_decrypt(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_decrypt_result,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionDecryptConstMeta,
      argValues: [that, encrypted],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionDecryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_decrypt",
        argNames: ["that", "encrypted"],
      );

  @override
  String? crateApiVodozemacInboundGroupSessionExportAt(
      {required VodozemacInboundGroupSession that, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_u_32(index);
        return wire.wire__crate__api__vodozemac_inbound_group_session_export_at(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionExportAtConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionExportAtConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_export_at",
        argNames: ["that", "index"],
      );

  @override
  String crateApiVodozemacInboundGroupSessionExportAtFirstKnownIndex({required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__api__vodozemac_inbound_group_session_export_at_first_known_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionExportAtFirstKnownIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionExportAtFirstKnownIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_export_at_first_known_index",
        argNames: ["that"],
      );

  @override
  int crateApiVodozemacInboundGroupSessionFirstKnownIndex({required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__api__vodozemac_inbound_group_session_first_known_index(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionFirstKnownIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionFirstKnownIndexConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_first_known_index",
        argNames: ["that"],
      );

  @override
  Future<VodozemacInboundGroupSession> crateApiVodozemacInboundGroupSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__api__vodozemac_inbound_group_session_from_olm_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  Future<VodozemacInboundGroupSession> crateApiVodozemacInboundGroupSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_inbound_group_session_from_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  VodozemacInboundGroupSession crateApiVodozemacInboundGroupSessionImport(
      {required String sessionKey, required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sessionKey);
        var arg1 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__api__vodozemac_inbound_group_session_import(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionImportConstMeta,
      argValues: [sessionKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionImportConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_import",
        argNames: ["sessionKey", "config"],
      );

  @override
  VodozemacInboundGroupSession crateApiVodozemacInboundGroupSessionNew(
      {required String sessionKey, required VodozemacMegolmSessionConfig config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sessionKey);
        var arg1 = cst_encode_box_autoadd_vodozemac_megolm_session_config(config);
        return wire.wire__crate__api__vodozemac_inbound_group_session_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_inbound_group_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionNewConstMeta,
      argValues: [sessionKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionNewConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_new",
        argNames: ["sessionKey", "config"],
      );

  @override
  Future<String> crateApiVodozemacInboundGroupSessionPickleEncrypted(
      {required VodozemacInboundGroupSession that, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_inbound_group_session_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  String crateApiVodozemacInboundGroupSessionSessionId({required VodozemacInboundGroupSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_inbound_group_session(that);
        return wire.wire__crate__api__vodozemac_inbound_group_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacInboundGroupSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacInboundGroupSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_inbound_group_session_session_id",
        argNames: ["that"],
      );

  @override
  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigDef() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_megolm_session_config_def();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacMegolmSessionConfigDefConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacMegolmSessionConfigDefConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_def",
        argNames: [],
      );

  @override
  int crateApiVodozemacMegolmSessionConfigVersion({required VodozemacMegolmSessionConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_megolm_session_config(that);
        return wire.wire__crate__api__vodozemac_megolm_session_config_version(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacMegolmSessionConfigVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacMegolmSessionConfigVersionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version",
        argNames: ["that"],
      );

  @override
  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigVersion1() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_megolm_session_config_version_1();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacMegolmSessionConfigVersion1ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacMegolmSessionConfigVersion1ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version_1",
        argNames: [],
      );

  @override
  VodozemacMegolmSessionConfig crateApiVodozemacMegolmSessionConfigVersion2() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_megolm_session_config_version_2();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_megolm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacMegolmSessionConfigVersion2ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacMegolmSessionConfigVersion2ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_megolm_session_config_version_2",
        argNames: [],
      );

  @override
  VodozemacOlmMessage crateApiVodozemacOlmMessageFromParts(
      {required BigInt messageType, required List<int> ciphertext}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_usize(messageType);
        var arg1 = cst_encode_list_prim_u_8_loose(ciphertext);
        return wire.wire__crate__api__vodozemac_olm_message_from_parts(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_message,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacOlmMessageFromPartsConstMeta,
      argValues: [messageType, ciphertext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmMessageFromPartsConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_from_parts",
        argNames: ["messageType", "ciphertext"],
      );

  @override
  String crateApiVodozemacOlmMessageMessage({required VodozemacOlmMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_message(that);
        return wire.wire__crate__api__vodozemac_olm_message_message(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmMessageMessageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmMessageMessageConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_message",
        argNames: ["that"],
      );

  @override
  BigInt crateApiVodozemacOlmMessageMessageType({required VodozemacOlmMessage that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_message(that);
        return wire.wire__crate__api__vodozemac_olm_message_message_type(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmMessageMessageTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmMessageMessageTypeConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_message_message_type",
        argNames: ["that"],
      );

  @override
  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigDef() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_olm_session_config_def();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmSessionConfigDefConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmSessionConfigDefConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_def",
        argNames: [],
      );

  @override
  int crateApiVodozemacOlmSessionConfigVersion({required VodozemacOlmSessionConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_olm_session_config(that);
        return wire.wire__crate__api__vodozemac_olm_session_config_version(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmSessionConfigVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmSessionConfigVersionConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version",
        argNames: ["that"],
      );

  @override
  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigVersion1() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_olm_session_config_version_1();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmSessionConfigVersion1ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmSessionConfigVersion1ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version_1",
        argNames: [],
      );

  @override
  VodozemacOlmSessionConfig crateApiVodozemacOlmSessionConfigVersion2() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire__crate__api__vodozemac_olm_session_config_version_2();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacOlmSessionConfigVersion2ConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacOlmSessionConfigVersion2ConstMeta => const TaskConstMeta(
        debugName: "vodozemac_olm_session_config_version_2",
        argNames: [],
      );

  @override
  Future<String> crateApiVodozemacSessionDecrypt(
      {required VodozemacSession that, required VodozemacOlmMessage message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_box_autoadd_vodozemac_olm_message(message);
        return wire.wire__crate__api__vodozemac_session_decrypt(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacSessionDecryptConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionDecryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_decrypt",
        argNames: ["that", "message"],
      );

  @override
  Future<VodozemacOlmMessage> crateApiVodozemacSessionEncrypt(
      {required VodozemacSession that, required String plaintext}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire__crate__api__vodozemac_session_encrypt(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacSessionEncryptConstMeta,
      argValues: [that, plaintext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionEncryptConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_encrypt",
        argNames: ["that", "plaintext"],
      );

  @override
  Future<VodozemacSession> crateApiVodozemacSessionFromOlmPickleEncrypted(
      {required String pickle, required List<int> pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_list_prim_u_8_loose(pickleKey);
        return wire.wire__crate__api__vodozemac_session_from_olm_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacSessionFromOlmPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionFromOlmPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_from_olm_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  Future<VodozemacSession> crateApiVodozemacSessionFromPickleEncrypted(
      {required String pickle, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(pickle);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_session_from_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_session,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiVodozemacSessionFromPickleEncryptedConstMeta,
      argValues: [pickle, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionFromPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_from_pickle_encrypted",
        argNames: ["pickle", "pickleKey"],
      );

  @override
  bool crateApiVodozemacSessionHasReceivedMessage({required VodozemacSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__api__vodozemac_session_has_received_message(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacSessionHasReceivedMessageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionHasReceivedMessageConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_has_received_message",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiVodozemacSessionPickleEncrypted(
      {required VodozemacSession that, required U8Array32 pickleKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        var arg1 = cst_encode_u_8_array_32(pickleKey);
        return wire.wire__crate__api__vodozemac_session_pickle_encrypted(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacSessionPickleEncryptedConstMeta,
      argValues: [that, pickleKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionPickleEncryptedConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_pickle_encrypted",
        argNames: ["that", "pickleKey"],
      );

  @override
  Future<VodozemacOlmSessionConfig> crateApiVodozemacSessionSessionConfig({required VodozemacSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__api__vodozemac_session_session_config(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_vodozemac_olm_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacSessionSessionConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionSessionConfigConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_session_config",
        argNames: ["that"],
      );

  @override
  String crateApiVodozemacSessionSessionId({required VodozemacSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_vodozemac_session(that);
        return wire.wire__crate__api__vodozemac_session_session_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVodozemacSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVodozemacSessionSessionIdConstMeta => const TaskConstMeta(
        debugName: "vodozemac_session_session_id",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Curve25519PublicKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_Curve25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Curve25519PublicKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Curve25519PublicKey;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519PublicKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_Ed25519PublicKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519PublicKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Ed25519PublicKey;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Ed25519Signature =>
      wire.rust_arc_increment_strong_count_RustOpaque_Ed25519Signature;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Ed25519Signature =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Ed25519Signature;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MegolmSessionConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_MegolmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MegolmSessionConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_MegolmSessionConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmMessage =>
      wire.rust_arc_increment_strong_count_RustOpaque_OlmMessage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmMessage =>
      wire.rust_arc_decrement_strong_count_RustOpaque_OlmMessage;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OlmSessionConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_OlmSessionConfig;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OlmSessionConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_OlmSessionConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockGroupSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockGroupSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockGroupSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockInboundGroupSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockInboundGroupSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockInboundGroupSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockInboundGroupSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockSession =>
      wire.rust_arc_increment_strong_count_RustOpaque_RwLockSession;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockSession =>
      wire.rust_arc_decrement_strong_count_RustOpaque_RwLockSession;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_RwLockAccount =>
      wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockAccount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_RwLockAccount =>
      wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockAccount;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Curve25519PublicKey dco_decode_RustOpaque_Curve25519PublicKey(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Curve25519PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ed25519PublicKey dco_decode_RustOpaque_Ed25519PublicKey(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ed25519PublicKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ed25519Signature dco_decode_RustOpaque_Ed25519Signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Ed25519SignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MegolmSessionConfig dco_decode_RustOpaque_MegolmSessionConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MegolmSessionConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OlmMessage dco_decode_RustOpaque_OlmMessage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OlmMessageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OlmSessionConfig dco_decode_RustOpaque_OlmSessionConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OlmSessionConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockGroupSession dco_decode_RustOpaque_RwLockGroupSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockGroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockInboundGroupSession dco_decode_RustOpaque_RwLockInboundGroupSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockInboundGroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockSession dco_decode_RustOpaque_RwLockSession(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockAccount dco_decode_RustOpaque_stdsyncRwLockAccount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  VodozemacAccount dco_decode_box_autoadd_vodozemac_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_account(raw);
  }

  @protected
  VodozemacCurve25519PublicKey dco_decode_box_autoadd_vodozemac_curve_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_curve_25519_public_key(raw);
  }

  @protected
  VodozemacEd25519PublicKey dco_decode_box_autoadd_vodozemac_ed_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_ed_25519_public_key(raw);
  }

  @protected
  VodozemacEd25519Signature dco_decode_box_autoadd_vodozemac_ed_25519_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_ed_25519_signature(raw);
  }

  @protected
  VodozemacGroupSession dco_decode_box_autoadd_vodozemac_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_group_session(raw);
  }

  @protected
  VodozemacInboundGroupSession dco_decode_box_autoadd_vodozemac_inbound_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_inbound_group_session(raw);
  }

  @protected
  VodozemacMegolmSessionConfig dco_decode_box_autoadd_vodozemac_megolm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_megolm_session_config(raw);
  }

  @protected
  VodozemacOlmMessage dco_decode_box_autoadd_vodozemac_olm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_olm_message(raw);
  }

  @protected
  VodozemacOlmSessionConfig dco_decode_box_autoadd_vodozemac_olm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_olm_session_config(raw);
  }

  @protected
  VodozemacSession dco_decode_box_autoadd_vodozemac_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vodozemac_session(raw);
  }

  @protected
  DecryptResult dco_decode_decrypt_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DecryptResult(
      field0: dco_decode_String(arr[0]),
      field1: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<VodozemacOneTimeKey> dco_decode_list_vodozemac_one_time_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_vodozemac_one_time_key).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array64(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VodozemacAccount dco_decode_vodozemac_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacAccount.raw(
      account: dco_decode_RustOpaque_stdsyncRwLockAccount(arr[0]),
    );
  }

  @protected
  VodozemacCurve25519PublicKey dco_decode_vodozemac_curve_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacCurve25519PublicKey(
      key: dco_decode_RustOpaque_Curve25519PublicKey(arr[0]),
    );
  }

  @protected
  VodozemacEd25519PublicKey dco_decode_vodozemac_ed_25519_public_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacEd25519PublicKey(
      key: dco_decode_RustOpaque_Ed25519PublicKey(arr[0]),
    );
  }

  @protected
  VodozemacEd25519Signature dco_decode_vodozemac_ed_25519_signature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacEd25519Signature(
      signature: dco_decode_RustOpaque_Ed25519Signature(arr[0]),
    );
  }

  @protected
  VodozemacGroupSession dco_decode_vodozemac_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacGroupSession.raw(
      session: dco_decode_RustOpaque_RwLockGroupSession(arr[0]),
    );
  }

  @protected
  VodozemacIdentityKeys dco_decode_vodozemac_identity_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacIdentityKeys(
      ed25519: dco_decode_vodozemac_ed_25519_public_key(arr[0]),
      curve25519: dco_decode_vodozemac_curve_25519_public_key(arr[1]),
    );
  }

  @protected
  VodozemacInboundGroupSession dco_decode_vodozemac_inbound_group_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacInboundGroupSession.raw(
      session: dco_decode_RustOpaque_RwLockInboundGroupSession(arr[0]),
    );
  }

  @protected
  VodozemacMegolmSessionConfig dco_decode_vodozemac_megolm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacMegolmSessionConfig(
      config: dco_decode_RustOpaque_MegolmSessionConfig(arr[0]),
    );
  }

  @protected
  VodozemacOlmMessage dco_decode_vodozemac_olm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacOlmMessage(
      msg: dco_decode_RustOpaque_OlmMessage(arr[0]),
    );
  }

  @protected
  VodozemacOlmSessionConfig dco_decode_vodozemac_olm_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacOlmSessionConfig(
      config: dco_decode_RustOpaque_OlmSessionConfig(arr[0]),
    );
  }

  @protected
  VodozemacOlmSessionCreationResult dco_decode_vodozemac_olm_session_creation_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacOlmSessionCreationResult(
      session: dco_decode_vodozemac_session(arr[0]),
      plaintext: dco_decode_String(arr[1]),
    );
  }

  @protected
  VodozemacOneTimeKey dco_decode_vodozemac_one_time_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VodozemacOneTimeKey(
      keyid: dco_decode_String(arr[0]),
      key: dco_decode_vodozemac_curve_25519_public_key(arr[1]),
    );
  }

  @protected
  VodozemacSession dco_decode_vodozemac_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VodozemacSession(
      session: dco_decode_RustOpaque_RwLockSession(arr[0]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Curve25519PublicKey sse_decode_RustOpaque_Curve25519PublicKey(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Curve25519PublicKeyImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ed25519PublicKey sse_decode_RustOpaque_Ed25519PublicKey(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ed25519PublicKeyImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ed25519Signature sse_decode_RustOpaque_Ed25519Signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Ed25519SignatureImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MegolmSessionConfig sse_decode_RustOpaque_MegolmSessionConfig(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MegolmSessionConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OlmMessage sse_decode_RustOpaque_OlmMessage(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OlmMessageImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OlmSessionConfig sse_decode_RustOpaque_OlmSessionConfig(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OlmSessionConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockGroupSession sse_decode_RustOpaque_RwLockGroupSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockGroupSessionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockInboundGroupSession sse_decode_RustOpaque_RwLockInboundGroupSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockInboundGroupSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockSession sse_decode_RustOpaque_RwLockSession(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockSessionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockAccount sse_decode_RustOpaque_stdsyncRwLockAccount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockAccountImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  VodozemacAccount sse_decode_box_autoadd_vodozemac_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_account(deserializer));
  }

  @protected
  VodozemacCurve25519PublicKey sse_decode_box_autoadd_vodozemac_curve_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_curve_25519_public_key(deserializer));
  }

  @protected
  VodozemacEd25519PublicKey sse_decode_box_autoadd_vodozemac_ed_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_ed_25519_public_key(deserializer));
  }

  @protected
  VodozemacEd25519Signature sse_decode_box_autoadd_vodozemac_ed_25519_signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_ed_25519_signature(deserializer));
  }

  @protected
  VodozemacGroupSession sse_decode_box_autoadd_vodozemac_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_group_session(deserializer));
  }

  @protected
  VodozemacInboundGroupSession sse_decode_box_autoadd_vodozemac_inbound_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_inbound_group_session(deserializer));
  }

  @protected
  VodozemacMegolmSessionConfig sse_decode_box_autoadd_vodozemac_megolm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_megolm_session_config(deserializer));
  }

  @protected
  VodozemacOlmMessage sse_decode_box_autoadd_vodozemac_olm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_olm_message(deserializer));
  }

  @protected
  VodozemacOlmSessionConfig sse_decode_box_autoadd_vodozemac_olm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_olm_session_config(deserializer));
  }

  @protected
  VodozemacSession sse_decode_box_autoadd_vodozemac_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vodozemac_session(deserializer));
  }

  @protected
  DecryptResult sse_decode_decrypt_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return DecryptResult(field0: var_field0, field1: var_field1);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<VodozemacOneTimeKey> sse_decode_list_vodozemac_one_time_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <VodozemacOneTimeKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_vodozemac_one_time_key(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array64(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VodozemacAccount sse_decode_vodozemac_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_account = sse_decode_RustOpaque_stdsyncRwLockAccount(deserializer);
    return VodozemacAccount.raw(account: var_account);
  }

  @protected
  VodozemacCurve25519PublicKey sse_decode_vodozemac_curve_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_RustOpaque_Curve25519PublicKey(deserializer);
    return VodozemacCurve25519PublicKey(key: var_key);
  }

  @protected
  VodozemacEd25519PublicKey sse_decode_vodozemac_ed_25519_public_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_RustOpaque_Ed25519PublicKey(deserializer);
    return VodozemacEd25519PublicKey(key: var_key);
  }

  @protected
  VodozemacEd25519Signature sse_decode_vodozemac_ed_25519_signature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signature = sse_decode_RustOpaque_Ed25519Signature(deserializer);
    return VodozemacEd25519Signature(signature: var_signature);
  }

  @protected
  VodozemacGroupSession sse_decode_vodozemac_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockGroupSession(deserializer);
    return VodozemacGroupSession.raw(session: var_session);
  }

  @protected
  VodozemacIdentityKeys sse_decode_vodozemac_identity_keys(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ed25519 = sse_decode_vodozemac_ed_25519_public_key(deserializer);
    var var_curve25519 = sse_decode_vodozemac_curve_25519_public_key(deserializer);
    return VodozemacIdentityKeys(ed25519: var_ed25519, curve25519: var_curve25519);
  }

  @protected
  VodozemacInboundGroupSession sse_decode_vodozemac_inbound_group_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockInboundGroupSession(deserializer);
    return VodozemacInboundGroupSession.raw(session: var_session);
  }

  @protected
  VodozemacMegolmSessionConfig sse_decode_vodozemac_megolm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_config = sse_decode_RustOpaque_MegolmSessionConfig(deserializer);
    return VodozemacMegolmSessionConfig(config: var_config);
  }

  @protected
  VodozemacOlmMessage sse_decode_vodozemac_olm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_msg = sse_decode_RustOpaque_OlmMessage(deserializer);
    return VodozemacOlmMessage(msg: var_msg);
  }

  @protected
  VodozemacOlmSessionConfig sse_decode_vodozemac_olm_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_config = sse_decode_RustOpaque_OlmSessionConfig(deserializer);
    return VodozemacOlmSessionConfig(config: var_config);
  }

  @protected
  VodozemacOlmSessionCreationResult sse_decode_vodozemac_olm_session_creation_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_vodozemac_session(deserializer);
    var var_plaintext = sse_decode_String(deserializer);
    return VodozemacOlmSessionCreationResult(session: var_session, plaintext: var_plaintext);
  }

  @protected
  VodozemacOneTimeKey sse_decode_vodozemac_one_time_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_keyid = sse_decode_String(deserializer);
    var var_key = sse_decode_vodozemac_curve_25519_public_key(deserializer);
    return VodozemacOneTimeKey(keyid: var_keyid, key: var_key);
  }

  @protected
  VodozemacSession sse_decode_vodozemac_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_session = sse_decode_RustOpaque_RwLockSession(deserializer);
    return VodozemacSession(session: var_session);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int cst_encode_RustOpaque_Curve25519PublicKey(Curve25519PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Curve25519PublicKeyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Ed25519PublicKey(Ed25519PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Ed25519PublicKeyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Ed25519Signature(Ed25519Signature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as Ed25519SignatureImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_MegolmSessionConfig(MegolmSessionConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MegolmSessionConfigImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_OlmMessage(OlmMessage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OlmMessageImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_OlmSessionConfig(OlmSessionConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OlmSessionConfigImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockGroupSession(RwLockGroupSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockGroupSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockInboundGroupSession(RwLockInboundGroupSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockInboundGroupSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_RwLockSession(RwLockSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_stdsyncRwLockAccount(RwLockAccount raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RwLockAccountImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_RustOpaque_Curve25519PublicKey(Curve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Curve25519PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Ed25519PublicKey(Ed25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Ed25519PublicKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Ed25519Signature(Ed25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as Ed25519SignatureImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MegolmSessionConfig(MegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as MegolmSessionConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_OlmMessage(OlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as OlmMessageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_OlmSessionConfig(OlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as OlmSessionConfigImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockGroupSession(RwLockGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockGroupSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockInboundGroupSession(RwLockInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockInboundGroupSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockSession(RwLockSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockAccount(RwLockAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as RwLockAccountImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_account(VodozemacAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_curve_25519_public_key(
      VodozemacCurve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_curve_25519_public_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_ed_25519_public_key(VodozemacEd25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_public_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_ed_25519_signature(VodozemacEd25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_signature(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_group_session(VodozemacGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_group_session(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_inbound_group_session(
      VodozemacInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_inbound_group_session(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_megolm_session_config(
      VodozemacMegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_megolm_session_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_olm_message(VodozemacOlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_olm_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_olm_session_config(VodozemacOlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_olm_session_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vodozemac_session(VodozemacSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_session(self, serializer);
  }

  @protected
  void sse_encode_decrypt_result(DecryptResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
    sse_encode_u_32(self.field1, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_vodozemac_one_time_key(List<VodozemacOneTimeKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_vodozemac_one_time_key(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vodozemac_account(VodozemacAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_stdsyncRwLockAccount(self.account, serializer);
  }

  @protected
  void sse_encode_vodozemac_curve_25519_public_key(VodozemacCurve25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Curve25519PublicKey(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_ed_25519_public_key(VodozemacEd25519PublicKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Ed25519PublicKey(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_ed_25519_signature(VodozemacEd25519Signature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Ed25519Signature(self.signature, serializer);
  }

  @protected
  void sse_encode_vodozemac_group_session(VodozemacGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockGroupSession(self.session, serializer);
  }

  @protected
  void sse_encode_vodozemac_identity_keys(VodozemacIdentityKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_ed_25519_public_key(self.ed25519, serializer);
    sse_encode_vodozemac_curve_25519_public_key(self.curve25519, serializer);
  }

  @protected
  void sse_encode_vodozemac_inbound_group_session(VodozemacInboundGroupSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockInboundGroupSession(self.session, serializer);
  }

  @protected
  void sse_encode_vodozemac_megolm_session_config(VodozemacMegolmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_MegolmSessionConfig(self.config, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_message(VodozemacOlmMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_OlmMessage(self.msg, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_session_config(VodozemacOlmSessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_OlmSessionConfig(self.config, serializer);
  }

  @protected
  void sse_encode_vodozemac_olm_session_creation_result(
      VodozemacOlmSessionCreationResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vodozemac_session(self.session, serializer);
    sse_encode_String(self.plaintext, serializer);
  }

  @protected
  void sse_encode_vodozemac_one_time_key(VodozemacOneTimeKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.keyid, serializer);
    sse_encode_vodozemac_curve_25519_public_key(self.key, serializer);
  }

  @protected
  void sse_encode_vodozemac_session(VodozemacSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RwLockSession(self.session, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class Curve25519PublicKeyImpl extends RustOpaque implements Curve25519PublicKey {
  // Not to be used by end users
  Curve25519PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Curve25519PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Curve25519PublicKey,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Curve25519PublicKey,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Curve25519PublicKeyPtr,
  );
}

@sealed
class Ed25519PublicKeyImpl extends RustOpaque implements Ed25519PublicKey {
  // Not to be used by end users
  Ed25519PublicKeyImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ed25519PublicKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Ed25519PublicKey,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519PublicKey,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519PublicKeyPtr,
  );
}

@sealed
class Ed25519SignatureImpl extends RustOpaque implements Ed25519Signature {
  // Not to be used by end users
  Ed25519SignatureImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Ed25519SignatureImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Ed25519Signature,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519Signature,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_Ed25519SignaturePtr,
  );
}

@sealed
class MegolmSessionConfigImpl extends RustOpaque implements MegolmSessionConfig {
  // Not to be used by end users
  MegolmSessionConfigImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MegolmSessionConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_MegolmSessionConfig,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_MegolmSessionConfig,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_MegolmSessionConfigPtr,
  );
}

@sealed
class OlmMessageImpl extends RustOpaque implements OlmMessage {
  // Not to be used by end users
  OlmMessageImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OlmMessageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_OlmMessage,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_OlmMessage,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_OlmMessagePtr,
  );
}

@sealed
class OlmSessionConfigImpl extends RustOpaque implements OlmSessionConfig {
  // Not to be used by end users
  OlmSessionConfigImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OlmSessionConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_OlmSessionConfig,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_OlmSessionConfig,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_OlmSessionConfigPtr,
  );
}

@sealed
class RwLockAccountImpl extends RustOpaque implements RwLockAccount {
  // Not to be used by end users
  RwLockAccountImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockAccountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockAccount,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockAccount,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockAccountPtr,
  );
}

@sealed
class RwLockGroupSessionImpl extends RustOpaque implements RwLockGroupSession {
  // Not to be used by end users
  RwLockGroupSessionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockGroupSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockGroupSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockGroupSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockGroupSessionPtr,
  );
}

@sealed
class RwLockInboundGroupSessionImpl extends RustOpaque implements RwLockInboundGroupSession {
  // Not to be used by end users
  RwLockInboundGroupSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockInboundGroupSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockInboundGroupSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockInboundGroupSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockInboundGroupSessionPtr,
  );
}

@sealed
class RwLockSessionImpl extends RustOpaque implements RwLockSession {
  // Not to be used by end users
  RwLockSessionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_RwLockSession,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockSession,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_RwLockSessionPtr,
  );
}

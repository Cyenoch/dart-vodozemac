// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';

import 'package:collection/collection.dart';

abstract class VodozemacBindingsDart {
  Future<int> versionMethodVodozemacMegolmSessionConfig({required VodozemacMegolmSessionConfig that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersionMethodVodozemacMegolmSessionConfigConstMeta;

  Future<VodozemacMegolmSessionConfig> version1StaticMethodVodozemacMegolmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersion1StaticMethodVodozemacMegolmSessionConfigConstMeta;

  Future<VodozemacMegolmSessionConfig> version2StaticMethodVodozemacMegolmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersion2StaticMethodVodozemacMegolmSessionConfigConstMeta;

  Future<VodozemacMegolmSessionConfig> defStaticMethodVodozemacMegolmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDefStaticMethodVodozemacMegolmSessionConfigConstMeta;

  Future<VodozemacGroupSession> newStaticMethodVodozemacGroupSession(
      {required VodozemacMegolmSessionConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodVodozemacGroupSessionConstMeta;

  Future<String> sessionIdMethodVodozemacGroupSession({required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIdMethodVodozemacGroupSessionConstMeta;

  Future<int> messageIndexMethodVodozemacGroupSession({required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageIndexMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacMegolmSessionConfig> sessionConfigMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionConfigMethodVodozemacGroupSessionConstMeta;

  Future<String> encryptMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, required String plaintext, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptMethodVodozemacGroupSessionConstMeta;

  Future<String> sessionKeyMethodVodozemacGroupSession({required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionKeyMethodVodozemacGroupSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPickleEncryptedMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacGroupSession> fromPickleEncryptedStaticMethodVodozemacGroupSession(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPickleEncryptedStaticMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacGroupSession> fromOlmPickleEncryptedStaticMethodVodozemacGroupSession(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromOlmPickleEncryptedStaticMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession> toInboundMethodVodozemacGroupSession(
      {required VodozemacGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToInboundMethodVodozemacGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession> newStaticMethodVodozemacInboundGroupSession(
      {required String sessionKey, required VodozemacMegolmSessionConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodVodozemacInboundGroupSessionConstMeta;

  Future<String> sessionIdMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIdMethodVodozemacInboundGroupSessionConstMeta;

  Future<int> firstKnownIndexMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFirstKnownIndexMethodVodozemacInboundGroupSessionConstMeta;

  Future<String> decryptMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, required String encrypted, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptMethodVodozemacInboundGroupSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPickleEncryptedMethodVodozemacInboundGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession> fromPickleEncryptedStaticMethodVodozemacInboundGroupSession(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPickleEncryptedStaticMethodVodozemacInboundGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession> fromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSession(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSessionConstMeta;

  Future<VodozemacInboundGroupSession> importStaticMethodVodozemacInboundGroupSession(
      {required String sessionKey, required VodozemacMegolmSessionConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kImportStaticMethodVodozemacInboundGroupSessionConstMeta;

  Future<String> exportAtFirstKnownIndexMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportAtFirstKnownIndexMethodVodozemacInboundGroupSessionConstMeta;

  Future<String?> exportAtMethodVodozemacInboundGroupSession(
      {required VodozemacInboundGroupSession that, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportAtMethodVodozemacInboundGroupSessionConstMeta;

  Future<int> versionMethodVodozemacOlmSessionConfig({required VodozemacOlmSessionConfig that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersionMethodVodozemacOlmSessionConfigConstMeta;

  Future<VodozemacOlmSessionConfig> version1StaticMethodVodozemacOlmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersion1StaticMethodVodozemacOlmSessionConfigConstMeta;

  Future<VodozemacOlmSessionConfig> version2StaticMethodVodozemacOlmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersion2StaticMethodVodozemacOlmSessionConfigConstMeta;

  Future<VodozemacOlmSessionConfig> defStaticMethodVodozemacOlmSessionConfig({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDefStaticMethodVodozemacOlmSessionConfigConstMeta;

  Future<VodozemacEd25519Signature> fromSliceStaticMethodVodozemacEd25519Signature(
      {required U8Array64 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromSliceStaticMethodVodozemacEd25519SignatureConstMeta;

  Future<VodozemacEd25519Signature> fromBase64StaticMethodVodozemacEd25519Signature(
      {required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromBase64StaticMethodVodozemacEd25519SignatureConstMeta;

  Future<String> toBase64MethodVodozemacEd25519Signature({required VodozemacEd25519Signature that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToBase64MethodVodozemacEd25519SignatureConstMeta;

  Future<U8Array64> toBytesMethodVodozemacEd25519Signature({required VodozemacEd25519Signature that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToBytesMethodVodozemacEd25519SignatureConstMeta;

  Future<VodozemacEd25519PublicKey> fromSliceStaticMethodVodozemacEd25519PublicKey(
      {required U8Array32 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromSliceStaticMethodVodozemacEd25519PublicKeyConstMeta;

  Future<U8Array32> asBytesMethodVodozemacEd25519PublicKey({required VodozemacEd25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsBytesMethodVodozemacEd25519PublicKeyConstMeta;

  Future<VodozemacEd25519PublicKey> fromBase64StaticMethodVodozemacEd25519PublicKey(
      {required String base64Key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromBase64StaticMethodVodozemacEd25519PublicKeyConstMeta;

  Future<String> toBase64MethodVodozemacEd25519PublicKey({required VodozemacEd25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToBase64MethodVodozemacEd25519PublicKeyConstMeta;

  /// Throws on mismatched signatures
  Future<void> verifyMethodVodozemacEd25519PublicKey(
      {required VodozemacEd25519PublicKey that,
      required String message,
      required VodozemacEd25519Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyMethodVodozemacEd25519PublicKeyConstMeta;

  Future<VodozemacCurve25519PublicKey> fromSliceStaticMethodVodozemacCurve25519PublicKey(
      {required U8Array32 bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromSliceStaticMethodVodozemacCurve25519PublicKeyConstMeta;

  Future<U8Array32> asBytesMethodVodozemacCurve25519PublicKey(
      {required VodozemacCurve25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsBytesMethodVodozemacCurve25519PublicKeyConstMeta;

  Future<VodozemacCurve25519PublicKey> fromBase64StaticMethodVodozemacCurve25519PublicKey(
      {required String base64Key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromBase64StaticMethodVodozemacCurve25519PublicKeyConstMeta;

  Future<String> toBase64MethodVodozemacCurve25519PublicKey({required VodozemacCurve25519PublicKey that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToBase64MethodVodozemacCurve25519PublicKeyConstMeta;

  Future<int> messageTypeMethodVodozemacOlmMessage({required VodozemacOlmMessage that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageTypeMethodVodozemacOlmMessageConstMeta;

  Future<String> messageMethodVodozemacOlmMessage({required VodozemacOlmMessage that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageMethodVodozemacOlmMessageConstMeta;

  Future<VodozemacOlmMessage> fromPartsStaticMethodVodozemacOlmMessage(
      {required int messageType, required String ciphertext, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPartsStaticMethodVodozemacOlmMessageConstMeta;

  Future<String> sessionIdMethodVodozemacSession({required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIdMethodVodozemacSessionConstMeta;

  Future<bool> hasReceivedMessageMethodVodozemacSession({required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHasReceivedMessageMethodVodozemacSessionConstMeta;

  Future<VodozemacOlmMessage> encryptMethodVodozemacSession(
      {required VodozemacSession that, required String plaintext, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptMethodVodozemacSessionConstMeta;

  Future<String> decryptMethodVodozemacSession(
      {required VodozemacSession that, required VodozemacOlmMessage message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptMethodVodozemacSessionConstMeta;

  Future<String> pickleEncryptedMethodVodozemacSession(
      {required VodozemacSession that, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPickleEncryptedMethodVodozemacSessionConstMeta;

  Future<VodozemacSession> fromPickleEncryptedStaticMethodVodozemacSession(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPickleEncryptedStaticMethodVodozemacSessionConstMeta;

  Future<VodozemacSession> fromOlmPickleEncryptedStaticMethodVodozemacSession(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromOlmPickleEncryptedStaticMethodVodozemacSessionConstMeta;

  Future<VodozemacOlmSessionConfig> sessionConfigMethodVodozemacSession({required VodozemacSession that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionConfigMethodVodozemacSessionConstMeta;

  Future<VodozemacAccount> newStaticMethodVodozemacAccount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodVodozemacAccountConstMeta;

  Future<int> maxNumberOfOneTimeKeysMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMaxNumberOfOneTimeKeysMethodVodozemacAccountConstMeta;

  Future<void> generateFallbackKeyMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateFallbackKeyMethodVodozemacAccountConstMeta;

  Future<bool> forgetFallbackKeyMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kForgetFallbackKeyMethodVodozemacAccountConstMeta;

  Future<void> generateOneTimeKeysMethodVodozemacAccount(
      {required VodozemacAccount that, required int count, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateOneTimeKeysMethodVodozemacAccountConstMeta;

  Future<void> markKeysAsPublishedMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMarkKeysAsPublishedMethodVodozemacAccountConstMeta;

  Future<VodozemacEd25519PublicKey> ed25519KeyMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEd25519KeyMethodVodozemacAccountConstMeta;

  Future<VodozemacCurve25519PublicKey> curve25519KeyMethodVodozemacAccount(
      {required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCurve25519KeyMethodVodozemacAccountConstMeta;

  Future<VodozemacIdentityKeys> identityKeysMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentityKeysMethodVodozemacAccountConstMeta;

  Future<List<VodozemacOneTimeKey>> oneTimeKeysMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOneTimeKeysMethodVodozemacAccountConstMeta;

  Future<List<VodozemacOneTimeKey>> fallbackKeyMethodVodozemacAccount({required VodozemacAccount that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFallbackKeyMethodVodozemacAccountConstMeta;

  Future<VodozemacEd25519Signature> signMethodVodozemacAccount(
      {required VodozemacAccount that, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodVodozemacAccountConstMeta;

  Future<VodozemacSession> createOutboundSessionMethodVodozemacAccount(
      {required VodozemacAccount that,
      required VodozemacOlmSessionConfig config,
      required VodozemacCurve25519PublicKey identityKey,
      required VodozemacCurve25519PublicKey oneTimeKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateOutboundSessionMethodVodozemacAccountConstMeta;

  Future<VodozemacOlmSessionCreationResult> createInboundSessionMethodVodozemacAccount(
      {required VodozemacAccount that,
      required VodozemacCurve25519PublicKey theirIdentityKey,
      required String preKeyMessageBase64,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateInboundSessionMethodVodozemacAccountConstMeta;

  Future<String> pickleEncryptedMethodVodozemacAccount(
      {required VodozemacAccount that, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPickleEncryptedMethodVodozemacAccountConstMeta;

  Future<VodozemacAccount> fromPickleEncryptedStaticMethodVodozemacAccount(
      {required String pickle, required U8Array32 pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPickleEncryptedStaticMethodVodozemacAccountConstMeta;

  Future<VodozemacAccount> fromOlmPickleEncryptedStaticMethodVodozemacAccount(
      {required String pickle, required Uint8List pickleKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromOlmPickleEncryptedStaticMethodVodozemacAccountConstMeta;

  DropFnType get dropOpaqueCurve25519PublicKey;
  ShareFnType get shareOpaqueCurve25519PublicKey;
  OpaqueTypeFinalizer get Curve25519PublicKeyFinalizer;

  DropFnType get dropOpaqueEd25519PublicKey;
  ShareFnType get shareOpaqueEd25519PublicKey;
  OpaqueTypeFinalizer get Ed25519PublicKeyFinalizer;

  DropFnType get dropOpaqueEd25519Signature;
  ShareFnType get shareOpaqueEd25519Signature;
  OpaqueTypeFinalizer get Ed25519SignatureFinalizer;

  DropFnType get dropOpaqueMegolmSessionConfig;
  ShareFnType get shareOpaqueMegolmSessionConfig;
  OpaqueTypeFinalizer get MegolmSessionConfigFinalizer;

  DropFnType get dropOpaqueOlmMessage;
  ShareFnType get shareOpaqueOlmMessage;
  OpaqueTypeFinalizer get OlmMessageFinalizer;

  DropFnType get dropOpaqueOlmSessionConfig;
  ShareFnType get shareOpaqueOlmSessionConfig;
  OpaqueTypeFinalizer get OlmSessionConfigFinalizer;

  DropFnType get dropOpaqueRwLockGroupSession;
  ShareFnType get shareOpaqueRwLockGroupSession;
  OpaqueTypeFinalizer get RwLockGroupSessionFinalizer;

  DropFnType get dropOpaqueRwLockInboundGroupSession;
  ShareFnType get shareOpaqueRwLockInboundGroupSession;
  OpaqueTypeFinalizer get RwLockInboundGroupSessionFinalizer;

  DropFnType get dropOpaqueRwLockSession;
  ShareFnType get shareOpaqueRwLockSession;
  OpaqueTypeFinalizer get RwLockSessionFinalizer;

  DropFnType get dropOpaqueStdSyncRwLockAccount;
  ShareFnType get shareOpaqueStdSyncRwLockAccount;
  OpaqueTypeFinalizer get StdSyncRwLockAccountFinalizer;
}

@sealed
class Curve25519PublicKey extends FrbOpaque {
  Curve25519PublicKey.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueCurve25519PublicKey;

  @override
  ShareFnType get shareFn => api.shareOpaqueCurve25519PublicKey;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.Curve25519PublicKeyFinalizer;
}

@sealed
class Ed25519PublicKey extends FrbOpaque {
  Ed25519PublicKey.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueEd25519PublicKey;

  @override
  ShareFnType get shareFn => api.shareOpaqueEd25519PublicKey;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.Ed25519PublicKeyFinalizer;
}

@sealed
class Ed25519Signature extends FrbOpaque {
  Ed25519Signature.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueEd25519Signature;

  @override
  ShareFnType get shareFn => api.shareOpaqueEd25519Signature;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.Ed25519SignatureFinalizer;
}

@sealed
class MegolmSessionConfig extends FrbOpaque {
  MegolmSessionConfig.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueMegolmSessionConfig;

  @override
  ShareFnType get shareFn => api.shareOpaqueMegolmSessionConfig;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.MegolmSessionConfigFinalizer;
}

@sealed
class OlmMessage extends FrbOpaque {
  OlmMessage.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueOlmMessage;

  @override
  ShareFnType get shareFn => api.shareOpaqueOlmMessage;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.OlmMessageFinalizer;
}

@sealed
class OlmSessionConfig extends FrbOpaque {
  OlmSessionConfig.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueOlmSessionConfig;

  @override
  ShareFnType get shareFn => api.shareOpaqueOlmSessionConfig;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.OlmSessionConfigFinalizer;
}

@sealed
class RwLockGroupSession extends FrbOpaque {
  RwLockGroupSession.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueRwLockGroupSession;

  @override
  ShareFnType get shareFn => api.shareOpaqueRwLockGroupSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.RwLockGroupSessionFinalizer;
}

@sealed
class RwLockInboundGroupSession extends FrbOpaque {
  RwLockInboundGroupSession.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueRwLockInboundGroupSession;

  @override
  ShareFnType get shareFn => api.shareOpaqueRwLockInboundGroupSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.RwLockInboundGroupSessionFinalizer;
}

@sealed
class RwLockSession extends FrbOpaque {
  RwLockSession.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueRwLockSession;

  @override
  ShareFnType get shareFn => api.shareOpaqueRwLockSession;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.RwLockSessionFinalizer;
}

@sealed
class StdSyncRwLockAccount extends FrbOpaque {
  StdSyncRwLockAccount.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueStdSyncRwLockAccount;

  @override
  ShareFnType get shareFn => api.shareOpaqueStdSyncRwLockAccount;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.StdSyncRwLockAccountFinalizer;
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;
  U8Array64(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array64.unchecked(Uint8List inner) : super(inner);
  U8Array64.init() : super(Uint8List(arraySize));
}

class VodozemacAccount {
  final StdSyncRwLockAccount account;

  const VodozemacAccount({
    required this.account,
  });

  static Future<VodozemacAccount> newVodozemacAccount({dynamic hint}) =>
      api.newStaticMethodVodozemacAccount(hint: hint);

  Future<int> maxNumberOfOneTimeKeys({dynamic hint}) => api.maxNumberOfOneTimeKeysMethodVodozemacAccount(
        that: this,
      );

  Future<void> generateFallbackKey({dynamic hint}) => api.generateFallbackKeyMethodVodozemacAccount(
        that: this,
      );

  Future<bool> forgetFallbackKey({dynamic hint}) => api.forgetFallbackKeyMethodVodozemacAccount(
        that: this,
      );

  Future<void> generateOneTimeKeys({required int count, dynamic hint}) => api.generateOneTimeKeysMethodVodozemacAccount(
        that: this,
        count: count,
      );

  Future<void> markKeysAsPublished({dynamic hint}) => api.markKeysAsPublishedMethodVodozemacAccount(
        that: this,
      );

  Future<VodozemacEd25519PublicKey> ed25519Key({dynamic hint}) => api.ed25519KeyMethodVodozemacAccount(
        that: this,
      );

  Future<VodozemacCurve25519PublicKey> curve25519Key({dynamic hint}) => api.curve25519KeyMethodVodozemacAccount(
        that: this,
      );

  Future<VodozemacIdentityKeys> identityKeys({dynamic hint}) => api.identityKeysMethodVodozemacAccount(
        that: this,
      );

  Future<List<VodozemacOneTimeKey>> oneTimeKeys({dynamic hint}) => api.oneTimeKeysMethodVodozemacAccount(
        that: this,
      );

  Future<List<VodozemacOneTimeKey>> fallbackKey({dynamic hint}) => api.fallbackKeyMethodVodozemacAccount(
        that: this,
      );

  Future<VodozemacEd25519Signature> sign({required String message, dynamic hint}) => api.signMethodVodozemacAccount(
        that: this,
        message: message,
      );

  Future<VodozemacSession> createOutboundSession(
          {required VodozemacOlmSessionConfig config,
          required VodozemacCurve25519PublicKey identityKey,
          required VodozemacCurve25519PublicKey oneTimeKey,
          dynamic hint}) =>
      api.createOutboundSessionMethodVodozemacAccount(
        that: this,
        config: config,
        identityKey: identityKey,
        oneTimeKey: oneTimeKey,
      );

  Future<VodozemacOlmSessionCreationResult> createInboundSession(
          {required VodozemacCurve25519PublicKey theirIdentityKey,
          required String preKeyMessageBase64,
          dynamic hint}) =>
      api.createInboundSessionMethodVodozemacAccount(
        that: this,
        theirIdentityKey: theirIdentityKey,
        preKeyMessageBase64: preKeyMessageBase64,
      );

  Future<String> pickleEncrypted({required U8Array32 pickleKey, dynamic hint}) =>
      api.pickleEncryptedMethodVodozemacAccount(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacAccount> fromPickleEncrypted(
          {required String pickle, required U8Array32 pickleKey, dynamic hint}) =>
      api.fromPickleEncryptedStaticMethodVodozemacAccount(pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacAccount> fromOlmPickleEncrypted(
          {required String pickle, required Uint8List pickleKey, dynamic hint}) =>
      api.fromOlmPickleEncryptedStaticMethodVodozemacAccount(pickle: pickle, pickleKey: pickleKey, hint: hint);
}

class VodozemacCurve25519PublicKey {
  final Curve25519PublicKey key;

  const VodozemacCurve25519PublicKey({
    required this.key,
  });

  static Future<VodozemacCurve25519PublicKey> fromSlice({required U8Array32 bytes, dynamic hint}) =>
      api.fromSliceStaticMethodVodozemacCurve25519PublicKey(bytes: bytes, hint: hint);

  Future<U8Array32> asBytes({dynamic hint}) => api.asBytesMethodVodozemacCurve25519PublicKey(
        that: this,
      );

  static Future<VodozemacCurve25519PublicKey> fromBase64({required String base64Key, dynamic hint}) =>
      api.fromBase64StaticMethodVodozemacCurve25519PublicKey(base64Key: base64Key, hint: hint);

  Future<String> toBase64({dynamic hint}) => api.toBase64MethodVodozemacCurve25519PublicKey(
        that: this,
      );
}

class VodozemacEd25519PublicKey {
  final Ed25519PublicKey key;

  const VodozemacEd25519PublicKey({
    required this.key,
  });

  static Future<VodozemacEd25519PublicKey> fromSlice({required U8Array32 bytes, dynamic hint}) =>
      api.fromSliceStaticMethodVodozemacEd25519PublicKey(bytes: bytes, hint: hint);

  Future<U8Array32> asBytes({dynamic hint}) => api.asBytesMethodVodozemacEd25519PublicKey(
        that: this,
      );

  static Future<VodozemacEd25519PublicKey> fromBase64({required String base64Key, dynamic hint}) =>
      api.fromBase64StaticMethodVodozemacEd25519PublicKey(base64Key: base64Key, hint: hint);

  Future<String> toBase64({dynamic hint}) => api.toBase64MethodVodozemacEd25519PublicKey(
        that: this,
      );

  /// Throws on mismatched signatures
  Future<void> verify({required String message, required VodozemacEd25519Signature signature, dynamic hint}) =>
      api.verifyMethodVodozemacEd25519PublicKey(
        that: this,
        message: message,
        signature: signature,
      );
}

class VodozemacEd25519Signature {
  final Ed25519Signature signature;

  const VodozemacEd25519Signature({
    required this.signature,
  });

  static Future<VodozemacEd25519Signature> fromSlice({required U8Array64 bytes, dynamic hint}) =>
      api.fromSliceStaticMethodVodozemacEd25519Signature(bytes: bytes, hint: hint);

  static Future<VodozemacEd25519Signature> fromBase64({required String signature, dynamic hint}) =>
      api.fromBase64StaticMethodVodozemacEd25519Signature(signature: signature, hint: hint);

  Future<String> toBase64({dynamic hint}) => api.toBase64MethodVodozemacEd25519Signature(
        that: this,
      );

  Future<U8Array64> toBytes({dynamic hint}) => api.toBytesMethodVodozemacEd25519Signature(
        that: this,
      );
}

class VodozemacGroupSession {
  final RwLockGroupSession session;

  const VodozemacGroupSession({
    required this.session,
  });

  static Future<VodozemacGroupSession> newVodozemacGroupSession(
          {required VodozemacMegolmSessionConfig config, dynamic hint}) =>
      api.newStaticMethodVodozemacGroupSession(config: config, hint: hint);

  Future<String> sessionId({dynamic hint}) => api.sessionIdMethodVodozemacGroupSession(
        that: this,
      );

  Future<int> messageIndex({dynamic hint}) => api.messageIndexMethodVodozemacGroupSession(
        that: this,
      );

  Future<VodozemacMegolmSessionConfig> sessionConfig({dynamic hint}) => api.sessionConfigMethodVodozemacGroupSession(
        that: this,
      );

  Future<String> encrypt({required String plaintext, dynamic hint}) => api.encryptMethodVodozemacGroupSession(
        that: this,
        plaintext: plaintext,
      );

  Future<String> sessionKey({dynamic hint}) => api.sessionKeyMethodVodozemacGroupSession(
        that: this,
      );

  Future<String> pickleEncrypted({required U8Array32 pickleKey, dynamic hint}) =>
      api.pickleEncryptedMethodVodozemacGroupSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacGroupSession> fromPickleEncrypted(
          {required String pickle, required U8Array32 pickleKey, dynamic hint}) =>
      api.fromPickleEncryptedStaticMethodVodozemacGroupSession(pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacGroupSession> fromOlmPickleEncrypted(
          {required String pickle, required Uint8List pickleKey, dynamic hint}) =>
      api.fromOlmPickleEncryptedStaticMethodVodozemacGroupSession(pickle: pickle, pickleKey: pickleKey, hint: hint);

  Future<VodozemacInboundGroupSession> toInbound({dynamic hint}) => api.toInboundMethodVodozemacGroupSession(
        that: this,
      );
}

class VodozemacIdentityKeys {
  final VodozemacEd25519PublicKey ed25519;
  final VodozemacCurve25519PublicKey curve25519;

  const VodozemacIdentityKeys({
    required this.ed25519,
    required this.curve25519,
  });
}

class VodozemacInboundGroupSession {
  final RwLockInboundGroupSession session;

  const VodozemacInboundGroupSession({
    required this.session,
  });

  static Future<VodozemacInboundGroupSession> newVodozemacInboundGroupSession(
          {required String sessionKey, required VodozemacMegolmSessionConfig config, dynamic hint}) =>
      api.newStaticMethodVodozemacInboundGroupSession(sessionKey: sessionKey, config: config, hint: hint);

  Future<String> sessionId({dynamic hint}) => api.sessionIdMethodVodozemacInboundGroupSession(
        that: this,
      );

  Future<int> firstKnownIndex({dynamic hint}) => api.firstKnownIndexMethodVodozemacInboundGroupSession(
        that: this,
      );

  Future<String> decrypt({required String encrypted, dynamic hint}) => api.decryptMethodVodozemacInboundGroupSession(
        that: this,
        encrypted: encrypted,
      );

  Future<String> pickleEncrypted({required U8Array32 pickleKey, dynamic hint}) =>
      api.pickleEncryptedMethodVodozemacInboundGroupSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacInboundGroupSession> fromPickleEncrypted(
          {required String pickle, required U8Array32 pickleKey, dynamic hint}) =>
      api.fromPickleEncryptedStaticMethodVodozemacInboundGroupSession(pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacInboundGroupSession> fromOlmPickleEncrypted(
          {required String pickle, required Uint8List pickleKey, dynamic hint}) =>
      api.fromOlmPickleEncryptedStaticMethodVodozemacInboundGroupSession(
          pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacInboundGroupSession> import(
          {required String sessionKey, required VodozemacMegolmSessionConfig config, dynamic hint}) =>
      api.importStaticMethodVodozemacInboundGroupSession(sessionKey: sessionKey, config: config, hint: hint);

  Future<String> exportAtFirstKnownIndex({dynamic hint}) =>
      api.exportAtFirstKnownIndexMethodVodozemacInboundGroupSession(
        that: this,
      );

  Future<String?> exportAt({required int index, dynamic hint}) => api.exportAtMethodVodozemacInboundGroupSession(
        that: this,
        index: index,
      );
}

class VodozemacMegolmSessionConfig {
  final MegolmSessionConfig config;

  const VodozemacMegolmSessionConfig({
    required this.config,
  });

  Future<int> version({dynamic hint}) => api.versionMethodVodozemacMegolmSessionConfig(
        that: this,
      );

  static Future<VodozemacMegolmSessionConfig> version1({dynamic hint}) =>
      api.version1StaticMethodVodozemacMegolmSessionConfig(hint: hint);

  static Future<VodozemacMegolmSessionConfig> version2({dynamic hint}) =>
      api.version2StaticMethodVodozemacMegolmSessionConfig(hint: hint);

  static Future<VodozemacMegolmSessionConfig> def({dynamic hint}) =>
      api.defStaticMethodVodozemacMegolmSessionConfig(hint: hint);
}

class VodozemacOlmMessage {
  final OlmMessage msg;

  const VodozemacOlmMessage({
    required this.msg,
  });

  Future<int> messageType({dynamic hint}) => api.messageTypeMethodVodozemacOlmMessage(
        that: this,
      );

  Future<String> message({dynamic hint}) => api.messageMethodVodozemacOlmMessage(
        that: this,
      );

  static Future<VodozemacOlmMessage> fromParts({required int messageType, required String ciphertext, dynamic hint}) =>
      api.fromPartsStaticMethodVodozemacOlmMessage(messageType: messageType, ciphertext: ciphertext, hint: hint);
}

class VodozemacOlmSessionConfig {
  final OlmSessionConfig config;

  const VodozemacOlmSessionConfig({
    required this.config,
  });

  Future<int> version({dynamic hint}) => api.versionMethodVodozemacOlmSessionConfig(
        that: this,
      );

  static Future<VodozemacOlmSessionConfig> version1({dynamic hint}) =>
      api.version1StaticMethodVodozemacOlmSessionConfig(hint: hint);

  static Future<VodozemacOlmSessionConfig> version2({dynamic hint}) =>
      api.version2StaticMethodVodozemacOlmSessionConfig(hint: hint);

  static Future<VodozemacOlmSessionConfig> def({dynamic hint}) =>
      api.defStaticMethodVodozemacOlmSessionConfig(hint: hint);
}

class VodozemacOlmSessionCreationResult {
  final VodozemacSession session;
  final String plaintext;

  const VodozemacOlmSessionCreationResult({
    required this.session,
    required this.plaintext,
  });
}

class VodozemacOneTimeKey {
  final String keyid;
  final VodozemacCurve25519PublicKey key;

  const VodozemacOneTimeKey({
    required this.keyid,
    required this.key,
  });
}

class VodozemacSession {
  final RwLockSession session;

  const VodozemacSession({
    required this.session,
  });

  Future<String> sessionId({dynamic hint}) => api.sessionIdMethodVodozemacSession(
        that: this,
      );

  Future<bool> hasReceivedMessage({dynamic hint}) => api.hasReceivedMessageMethodVodozemacSession(
        that: this,
      );

  Future<VodozemacOlmMessage> encrypt({required String plaintext, dynamic hint}) => api.encryptMethodVodozemacSession(
        that: this,
        plaintext: plaintext,
      );

  Future<String> decrypt({required VodozemacOlmMessage message, dynamic hint}) => api.decryptMethodVodozemacSession(
        that: this,
        message: message,
      );

  Future<String> pickleEncrypted({required U8Array32 pickleKey, dynamic hint}) =>
      api.pickleEncryptedMethodVodozemacSession(
        that: this,
        pickleKey: pickleKey,
      );

  static Future<VodozemacSession> fromPickleEncrypted(
          {required String pickle, required U8Array32 pickleKey, dynamic hint}) =>
      api.fromPickleEncryptedStaticMethodVodozemacSession(pickle: pickle, pickleKey: pickleKey, hint: hint);

  static Future<VodozemacSession> fromOlmPickleEncrypted(
          {required String pickle, required Uint8List pickleKey, dynamic hint}) =>
      api.fromOlmPickleEncryptedStaticMethodVodozemacSession(pickle: pickle, pickleKey: pickleKey, hint: hint);

  Future<VodozemacOlmSessionConfig> sessionConfig({dynamic hint}) => api.sessionConfigMethodVodozemacSession(
        that: this,
      );
}
